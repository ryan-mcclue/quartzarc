
stm32f769.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800238c  0800238c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080023a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080023a0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00007f58  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000060de  00000000  00000000  00027f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001442  00000000  00000000  0002e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e36e  00000000  00000000  0002fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000004c0  00000000  00000000  0015dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003117f  00000000  00000000  0015e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c4  00000000  00000000  0018f430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800235c 	.word	0x0800235c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800235c 	.word	0x0800235c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000558:	4c0b      	ldr	r4, [pc, #44]	; (8000588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000566:	f000 fab3 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f001 fecb 	bl	8002304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800056e:	f000 fa6f 	bl	8000a50 <main>
  bx  lr    
 8000572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000574:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000580:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 8000584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000588:	2000002c 	.word	0x2000002c

0800058c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>
	...

08000590 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
}
 8000598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059a:	f3bf 8f6f 	isb	sy
}
 800059e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <SCB_EnableICache+0x48>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005a8:	f3bf 8f4f 	dsb	sy
}
 80005ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
}
 80005b2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SCB_EnableICache+0x48>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SCB_EnableICache+0x48>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SCB_EnableDCache+0x9c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SCB_EnableDCache+0x9c>)
 80005f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005f6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0b5b      	lsrs	r3, r3, #13
 80005fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000600:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	015a      	lsls	r2, r3, #5
 8000610:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000614:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061a:	4917      	ldr	r1, [pc, #92]	; (8000678 <SCB_EnableDCache+0x9c>)
 800061c:	4313      	orrs	r3, r2
 800061e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	60ba      	str	r2, [r7, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d000      	beq.n	8000638 <SCB_EnableDCache+0x5c>
      do {
 8000636:	e7e9      	b.n	800060c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	60fa      	str	r2, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf14      	ite	ne
 8000642:	2301      	movne	r3, #1
 8000644:	2300      	moveq	r3, #0
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d000      	beq.n	800064e <SCB_EnableDCache+0x72>
    do {
 800064c:	e7d9      	b.n	8000602 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x9c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x9c>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <_Z16SystemInitializev>:
#include "boot.hpp"

// System Initialize Function
QA_Result
SystemInitialize(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0c6      	sub	sp, #280	; 0x118
 8000680:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8000682:	f7ff ff85 	bl	8000590 <SCB_EnableICache>
  SCB_EnableDCache();
 8000686:	f7ff ffa9 	bl	80005dc <SCB_EnableDCache>

  // adaptive real time accelerator
  // quicker access to in-build flash
  __HAL_FLASH_ART_ENABLE();
 800068a:	4b69      	ldr	r3, [pc, #420]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a68      	ldr	r2, [pc, #416]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 8000690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000694:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000696:	4b66      	ldr	r3, [pc, #408]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a65      	ldr	r2, [pc, #404]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	6013      	str	r3, [r2, #0]

  // so instead of major.minor interrupt priorities,
  // only have single number between 0-15
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 fb4c 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  // set systick to a high priority
  // systick is a timer built into ARM, so is consistent unlike peripheral timers
  // also only counts up and no capture modes
  // IMPORTANT: If setting systick to say 1ms, NVIC might dump some interrupts as too many
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fa23 	bl	8000af4 <HAL_InitTick>
  // The processor has some sort of 'backup' domain circuitry,
  // i.e. memory and registers that are preserved on reset, code flashing
  // we want to have LSE as part of this 'backup' domain also
  // so it can power RTC?
  // to modify the 'backup' domain, must get access to it
  HAL_PWR_EnableBkUpAccess();
 80006ae:	f000 fd41 	bl	8001134 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006b6:	4a5f      	ldr	r2, [pc, #380]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006b8:	f023 0318 	bic.w	r3, r3, #24
 80006bc:	6713      	str	r3, [r2, #112]	; 0x70

  // enable power management clock
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  // internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b58      	ldr	r3, [pc, #352]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a57      	ldr	r2, [pc, #348]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80006ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  // 1. enable oscillators and PLL so frequency output for system is what we want
  // 2. making sure bus clock and bus clock dividers are correct
  // 3. setup some peripheral clocks (most are driver specific)
  // 4. setup GPIO clocks and DMA clocks

  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fe28 	bl	800234c <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 80006fc:	2305      	movs	r3, #5
 80006fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInit.HSEState = RCC_HSE_ON;
 8000702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState = RCC_LSE_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInit.PLL.PLLM = 25;
 800071e:	2319      	movs	r3, #25
 8000720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN = 432;
 8000724:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK)
 8000738:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd59 	bl	80011f4 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <_Z16SystemInitializev+0xda>
  {
    return QA_Fail;
 8000752:	2301      	movs	r3, #1
 8000754:	e147      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // syscfg collection of registers not fitting elsewhere
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a36      	ldr	r2, [pc, #216]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  // overdrive mode ensures running smoothly at max. clock value
  // i.e. allow core to run at higher frequency than default
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076e:	f000 fcf1 	bl	8001154 <HAL_PWREx_EnableOverDrive>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <_Z16SystemInitializev+0x10a>
  {
  	return QA_Fail;
 8000782:	2301      	movs	r3, #1
 8000784:	e12f      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // enable cpu and bus clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000786:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000796:	230f      	movs	r3, #15
 8000798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK)
 80007b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007bc:	2107      	movs	r1, #7
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ffc6 	bl	8001750 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_Z16SystemInitializev+0x15c>
  {
    return QA_Fail;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e106      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // setup peripheral clocks
  // RTC is considered a peripheral?
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007dc:	2290      	movs	r2, #144	; 0x90
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fdb3 	bl	800234c <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_USART1;
 80007e6:	2368      	movs	r3, #104	; 0x68
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40

  // LTDC uses SAI PLL
  RCC_PeriphClkInit.PLLSAI.PLLSAIN = 384;
 80007ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphClkInit.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007f0:	2303      	movs	r3, #3
 80007f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_PeriphClkInit.PLLSAI.PLLSAIR = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_PeriphClkInit.PLLSAI.PLLSAIQ = 8;
 80007f8:	2308      	movs	r3, #8
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_PeriphClkInit.PLLSAIDivQ = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_PeriphClkInit.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000800:	2300      	movs	r3, #0
 8000802:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8000810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f94d 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d008      	beq.n	800083c <_Z16SystemInitializev+0x1c0>
  {
    return QA_Fail;
 800082a:	2301      	movs	r3, #1
 800082c:	e0db      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
 800082e:	bf00      	nop
 8000830:	40023c00 	.word	0x40023c00
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000
  }

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a6b      	ldr	r2, [pc, #428]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
 8000848:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a65      	ldr	r2, [pc, #404]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b63      	ldr	r3, [pc, #396]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a5f      	ldr	r2, [pc, #380]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
 8000882:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089c:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4a53      	ldr	r2, [pc, #332]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6313      	str	r3, [r2, #48]	; 0x30
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b4:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a4d      	ldr	r2, [pc, #308]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008cc:	4b48      	ldr	r3, [pc, #288]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a47      	ldr	r2, [pc, #284]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008f2:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a3d      	ldr	r2, [pc, #244]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8000908:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800090c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800093e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000942:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800095c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800096a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800098e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000992:	681b      	ldr	r3, [r3, #0]

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800099a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80009a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009ba:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80009d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009e2:	681b      	ldr	r3, [r3, #0]


  return QA_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
#include "handlers.hpp"

void
NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:

void
HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
	while(1) {}
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:
}

void
MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	while (1) {}
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:
}

void
BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
	while(1) {}
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:
}

void
UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	while(1) {}
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:
}

void
SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

void
DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

void
PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

void
SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a48:	f000 f884 	bl	8000b54 <HAL_IncTick>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <main>:
#include "main.hpp"
#include "boot.hpp"

int
main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  // System setup
  if (SystemInitialize())
 8000a56:	f7ff fe11 	bl	800067c <_Z16SystemInitializev>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d000      	beq.n	8000a6c <main+0x1c>
  {
    while (1) {}
 8000a6a:	e7fe      	b.n	8000a6a <main+0x1a>
  }

  // Initialize GPIOs
  GPIO_InitTypeDef GPIO_Init = {};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
  GPIO_Init.Pin = QA_USERLED_RED_GPIO_PIN;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	607b      	str	r3, [r7, #4]
  GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_Init.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(QA_USERLED_RED_GPIO_PORT, &GPIO_Init);
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480e      	ldr	r0, [pc, #56]	; (8000acc <main+0x7c>)
 8000a92:	f000 f989 	bl	8000da8 <HAL_GPIO_Init>

  GPIO_Init.Pin = QA_USERLED_GREEN_GPIO_PIN;
 8000a96:	2320      	movs	r3, #32
 8000a98:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(QA_USERLED_GREEN_GPIO_PORT, &GPIO_Init);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <main+0x7c>)
 8000aa0:	f000 f982 	bl	8000da8 <HAL_GPIO_Init>


  // Processing loop
  while (1) {
  	HAL_GPIO_WritePin(QA_USERLED_GREEN_GPIO_PORT, QA_USERLED_GREEN_GPIO_PIN, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <main+0x7c>)
 8000aaa:	f000 fb29 	bl	8001100 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f000 f86f 	bl	8000b94 <HAL_Delay>
  	HAL_GPIO_WritePin(QA_USERLED_GREEN_GPIO_PORT, QA_USERLED_GREEN_GPIO_PIN, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <main+0x7c>)
 8000abc:	f000 fb20 	bl	8001100 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 f866 	bl	8000b94 <HAL_Delay>
  	HAL_GPIO_WritePin(QA_USERLED_GREEN_GPIO_PORT, QA_USERLED_GREEN_GPIO_PIN, GPIO_PIN_SET);
 8000ac8:	e7ec      	b.n	8000aa4 <main+0x54>
 8000aca:	bf00      	nop
 8000acc:	40022400 	.word	0x40022400

08000ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f93b 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	f000 f911 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000028 	.word	0x20000028

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriorityGrouping>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	05fa0000 	.word	0x05fa0000

08000c24 <__NVIC_GetPriorityGrouping>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff47 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5c 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e175      	b.n	80010b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8164 	bne.w	80010ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x56>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80be 	beq.w	80010ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b66      	ldr	r3, [pc, #408]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a65      	ldr	r2, [pc, #404]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f4a:	4a61      	ldr	r2, [pc, #388]	; (80010d0 <HAL_GPIO_Init+0x328>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x32c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d037      	beq.n	8000fe6 <HAL_GPIO_Init+0x23e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x330>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d031      	beq.n	8000fe2 <HAL_GPIO_Init+0x23a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a56      	ldr	r2, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x334>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d02b      	beq.n	8000fde <HAL_GPIO_Init+0x236>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a55      	ldr	r2, [pc, #340]	; (80010e0 <HAL_GPIO_Init+0x338>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x232>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a54      	ldr	r2, [pc, #336]	; (80010e4 <HAL_GPIO_Init+0x33c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x22e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <HAL_GPIO_Init+0x340>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x22a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a52      	ldr	r2, [pc, #328]	; (80010ec <HAL_GPIO_Init+0x344>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x226>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <HAL_GPIO_Init+0x348>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x222>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_GPIO_Init+0x34c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x21e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_GPIO_Init+0x350>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x21a>
 8000fbe:	2309      	movs	r3, #9
 8000fc0:	e012      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	e010      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	e00e      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x240>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x328>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <HAL_GPIO_Init+0x354>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001030:	4b32      	ldr	r3, [pc, #200]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_GPIO_Init+0x354>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_GPIO_Init+0x354>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_GPIO_Init+0x354>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f67f ae86 	bls.w	8000dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40021c00 	.word	0x40021c00
 80010f4:	40022000 	.word	0x40022000
 80010f8:	40022400 	.word	0x40022400
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_PWREx_EnableOverDrive+0x98>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001182:	f7ff fcfb 	bl	8000b7c <HAL_GetTick>
 8001186:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001188:	e009      	b.n	800119e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800118a:	f7ff fcf7 	bl	8000b7c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001198:	d901      	bls.n	800119e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e022      	b.n	80011e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011aa:	d1ee      	bne.n	800118a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b8:	f7ff fce0 	bl	8000b7c <HAL_GetTick>
 80011bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011be:	e009      	b.n	80011d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c0:	f7ff fcdc 	bl	8000b7c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ce:	d901      	bls.n	80011d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e007      	b.n	80011e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011e0:	d1ee      	bne.n	80011c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e29b      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001218:	4b96      	ldr	r3, [pc, #600]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x62>
 8001230:	4b90      	ldr	r3, [pc, #576]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x130>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e275      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x7a>
 8001260:	4b84      	ldr	r3, [pc, #528]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a83      	ldr	r2, [pc, #524]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x9c>
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7e      	ldr	r2, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7b      	ldr	r2, [pc, #492]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a72      	ldr	r2, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd8>
 80012b4:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6e      	ldr	r2, [pc, #440]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6b      	ldr	r2, [pc, #428]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fc52 	bl	8000b7c <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fc4e 	bl	8000b7c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e229      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b61      	ldr	r3, [pc, #388]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc3e 	bl	8000b7c <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fc3a 	bl	8000b7c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e215      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x110>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d069      	beq.n	8001406 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	4b50      	ldr	r3, [pc, #320]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x190>
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1e9      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	493d      	ldr	r1, [pc, #244]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e040      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a38      	ldr	r2, [pc, #224]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fbf0 	bl	8000b7c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbec 	bl	8000b7c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1c7      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4929      	ldr	r1, [pc, #164]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbcc 	bl	8000b7c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fbc8 	bl	8000b7c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1a3      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d038      	beq.n	8001484 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d019      	beq.n	800144e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fba9 	bl	8000b7c <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fba5 	bl	8000b7c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e180      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x23a>
 800144c:	e01a      	b.n	8001484 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff fb8f 	bl	8000b7c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fb8b 	bl	8000b7c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d903      	bls.n	8001478 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e166      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
 8001474:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b92      	ldr	r3, [pc, #584]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a4 	beq.w	80015da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b8c      	ldr	r3, [pc, #560]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b89      	ldr	r3, [pc, #548]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a88      	ldr	r2, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b86      	ldr	r3, [pc, #536]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014c6:	4b80      	ldr	r3, [pc, #512]	; (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7f      	ldr	r2, [pc, #508]	; (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb53 	bl	8000b7c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fb4f 	bl	8000b7c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	; 0x64
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e12a      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x4d4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x31a>
 8001500:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	e02d      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x33c>
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a67      	ldr	r2, [pc, #412]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x35e>
 8001538:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a61      	ldr	r2, [pc, #388]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x376>
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff fb03 	bl	8000b7c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff faff 	bl	8000b7c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0d8      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <HAL_RCC_OscConfig+0x386>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff faed 	bl	8000b7c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fae9 	bl	8000b7c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c2      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80ae 	beq.w	8001740 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d06d      	beq.n	80016cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d14b      	bne.n	8001690 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff faba 	bl	8000b7c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fab6 	bl	8000b7c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e091      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	071b      	lsls	r3, r3, #28
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fa88 	bl	8000b7c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fa84 	bl	8000b7c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e05f      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x47c>
 800168e:	e057      	b.n	8001740 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fa6e 	bl	8000b7c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fa6a 	bl	8000b7c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4b0>
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x54c>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_RCC_OscConfig+0x558>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d030      	beq.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d129      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d122      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001702:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d119      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d10f      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 020f 	bic.w	r2, r3, #15
 800177e:	4965      	ldr	r1, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001844:	f7ff f99a 	bl	8000b7c <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f996 	bl	8000b7c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4922      	ldr	r1, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1cc>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1d0>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8f6 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	08002374 	.word	0x08002374
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b090      	sub	sp, #64	; 0x40
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
 8001934:	2300      	movs	r3, #0
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80a1 	bhi.w	8001a94 <HAL_RCC_GetSysClockFreq+0x16c>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e09b      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_GetSysClockFreq+0x184>)
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001960:	e09b      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001966:	e098      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d028      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	2200      	movs	r2, #0
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	627a      	str	r2, [r7, #36]	; 0x24
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001990:	2100      	movs	r1, #0
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001994:	fb03 f201 	mul.w	r2, r3, r1
 8001998:	2300      	movs	r3, #0
 800199a:	fb00 f303 	mul.w	r3, r0, r3
 800199e:	4413      	add	r3, r2
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019a2:	fba0 1202 	umull	r1, r2, r0, r2
 80019a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a8:	460a      	mov	r2, r1
 80019aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	4413      	add	r3, r2
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	2200      	movs	r2, #0
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	61fa      	str	r2, [r7, #28]
 80019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019c2:	f7fe fc39 	bl	8000238 <__aeabi_uldivmod>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4613      	mov	r3, r2
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ce:	e053      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	2200      	movs	r2, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	617a      	str	r2, [r7, #20]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019e2:	f04f 0b00 	mov.w	fp, #0
 80019e6:	4652      	mov	r2, sl
 80019e8:	465b      	mov	r3, fp
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0159      	lsls	r1, r3, #5
 80019f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f8:	0150      	lsls	r0, r2, #5
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001a02:	eb63 090b 	sbc.w	r9, r3, fp
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a1a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a1e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	00eb      	lsls	r3, r5, #3
 8001a2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a30:	00e2      	lsls	r2, r4, #3
 8001a32:	4614      	mov	r4, r2
 8001a34:	461d      	mov	r5, r3
 8001a36:	eb14 030a 	adds.w	r3, r4, sl
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	eb45 030b 	adc.w	r3, r5, fp
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4e:	4629      	mov	r1, r5
 8001a50:	028b      	lsls	r3, r1, #10
 8001a52:	4621      	mov	r1, r4
 8001a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a58:	4621      	mov	r1, r4
 8001a5a:	028a      	lsls	r2, r1, #10
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	2200      	movs	r2, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a6c:	f7fe fbe4 	bl	8000238 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a92:	e002      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetSysClockFreq+0x184>)
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3740      	adds	r7, #64	; 0x40
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	017d7840 	.word	0x017d7840

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001adc:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a68      	ldr	r2, [pc, #416]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ae6:	6093      	str	r3, [r2, #8]
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	4964      	ldr	r1, [pc, #400]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d017      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	4959      	ldr	r1, [pc, #356]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d017      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	494a      	ldr	r1, [pc, #296]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b68:	d101      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 808b 	beq.w	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a39      	ldr	r2, [pc, #228]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bbc:	f7fe ffde 	bl	8000b7c <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc4:	f7fe ffda 	bl	8000b7c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e38f      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d035      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d02e      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d114      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7fe ffa2 	bl	8000b7c <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff9e 	bl	8000b7c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e351      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c6a:	d111      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	4901      	ldr	r1, [pc, #4]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	0ffffcff 	.word	0x0ffffcff
 8001c90:	4bac      	ldr	r3, [pc, #688]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4aab      	ldr	r2, [pc, #684]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c9a:	6093      	str	r3, [r2, #8]
 8001c9c:	4ba9      	ldr	r3, [pc, #676]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	49a6      	ldr	r1, [pc, #664]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cba:	4ba2      	ldr	r3, [pc, #648]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc0:	4aa0      	ldr	r2, [pc, #640]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cca:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ccc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	499b      	ldr	r1, [pc, #620]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cf6:	4993      	ldr	r1, [pc, #588]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d0a:	4b8e      	ldr	r3, [pc, #568]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d18:	498a      	ldr	r1, [pc, #552]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d2c:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3a:	4982      	ldr	r1, [pc, #520]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d4e:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4979      	ldr	r1, [pc, #484]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d70:	4b74      	ldr	r3, [pc, #464]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4971      	ldr	r1, [pc, #452]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	f023 020c 	bic.w	r2, r3, #12
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	4968      	ldr	r1, [pc, #416]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db4:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4960      	ldr	r1, [pc, #384]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de4:	4957      	ldr	r1, [pc, #348]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	494f      	ldr	r1, [pc, #316]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4946      	ldr	r1, [pc, #280]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e3c:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	493e      	ldr	r1, [pc, #248]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6c:	4935      	ldr	r1, [pc, #212]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00a      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e8e:	492d      	ldr	r1, [pc, #180]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d011      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eb0:	4924      	ldr	r1, [pc, #144]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef0:	4914      	ldr	r1, [pc, #80]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f14:	490b      	ldr	r1, [pc, #44]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f38:	4902      	ldr	r1, [pc, #8]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f40:	e002      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f54:	4b8a      	ldr	r3, [pc, #552]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f64:	4986      	ldr	r1, [pc, #536]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	497d      	ldr	r1, [pc, #500]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d006      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80d6 	beq.w	8002150 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fa4:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a75      	ldr	r2, [pc, #468]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fde4 	bl	8000b7c <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fb8:	f7fe fde0 	bl	8000b7c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e195      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fca:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d021      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11d      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ff8:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffe:	0e1b      	lsrs	r3, r3, #24
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	019a      	lsls	r2, r3, #6
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	041b      	lsls	r3, r3, #16
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	071b      	lsls	r3, r3, #28
 800201e:	4958      	ldr	r1, [pc, #352]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02e      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002050:	d129      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002066:	0f1b      	lsrs	r3, r3, #28
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	019a      	lsls	r2, r3, #6
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	061b      	lsls	r3, r3, #24
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	071b      	lsls	r3, r3, #28
 8002086:	493e      	ldr	r1, [pc, #248]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002094:	f023 021f 	bic.w	r2, r3, #31
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	3b01      	subs	r3, #1
 800209e:	4938      	ldr	r1, [pc, #224]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01d      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b8:	0e1b      	lsrs	r3, r3, #24
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c6:	0f1b      	lsrs	r3, r3, #28
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	019a      	lsls	r2, r3, #6
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431a      	orrs	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	071b      	lsls	r3, r3, #28
 80020e6:	4926      	ldr	r1, [pc, #152]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d011      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	019a      	lsls	r2, r3, #6
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	071b      	lsls	r3, r3, #28
 8002116:	491a      	ldr	r1, [pc, #104]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212a:	f7fe fd27 	bl	8000b7c <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002132:	f7fe fd23 	bl	8000b7c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0d8      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 80ce 	bne.w	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fd0a 	bl	8000b7c <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800216a:	e00b      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800216c:	f7fe fd06 	bl	8000b7c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d904      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0bb      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002184:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800218c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002190:	d0ec      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02e      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12a      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021c8:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	0f1b      	lsrs	r3, r3, #28
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	019a      	lsls	r2, r3, #6
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	071b      	lsls	r3, r3, #28
 80021ee:	4944      	ldr	r1, [pc, #272]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	493d      	ldr	r1, [pc, #244]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d022      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002224:	d11d      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	0e1b      	lsrs	r3, r3, #24
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	0f1b      	lsrs	r3, r3, #28
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	071b      	lsls	r3, r3, #28
 800225a:	4929      	ldr	r1, [pc, #164]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d028      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	0e1b      	lsrs	r3, r3, #24
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	019a      	lsls	r2, r3, #6
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	071b      	lsls	r3, r3, #28
 80022a2:	4917      	ldr	r1, [pc, #92]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	4911      	ldr	r1, [pc, #68]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022cc:	f7fe fc56 	bl	8000b7c <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022d4:	f7fe fc52 	bl	8000b7c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e007      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f2:	d1ef      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <__libc_init_array>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	4d0d      	ldr	r5, [pc, #52]	; (800233c <__libc_init_array+0x38>)
 8002308:	4c0d      	ldr	r4, [pc, #52]	; (8002340 <__libc_init_array+0x3c>)
 800230a:	1b64      	subs	r4, r4, r5
 800230c:	10a4      	asrs	r4, r4, #2
 800230e:	2600      	movs	r6, #0
 8002310:	42a6      	cmp	r6, r4
 8002312:	d109      	bne.n	8002328 <__libc_init_array+0x24>
 8002314:	4d0b      	ldr	r5, [pc, #44]	; (8002344 <__libc_init_array+0x40>)
 8002316:	4c0c      	ldr	r4, [pc, #48]	; (8002348 <__libc_init_array+0x44>)
 8002318:	f000 f820 	bl	800235c <_init>
 800231c:	1b64      	subs	r4, r4, r5
 800231e:	10a4      	asrs	r4, r4, #2
 8002320:	2600      	movs	r6, #0
 8002322:	42a6      	cmp	r6, r4
 8002324:	d105      	bne.n	8002332 <__libc_init_array+0x2e>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	f855 3b04 	ldr.w	r3, [r5], #4
 800232c:	4798      	blx	r3
 800232e:	3601      	adds	r6, #1
 8002330:	e7ee      	b.n	8002310 <__libc_init_array+0xc>
 8002332:	f855 3b04 	ldr.w	r3, [r5], #4
 8002336:	4798      	blx	r3
 8002338:	3601      	adds	r6, #1
 800233a:	e7f2      	b.n	8002322 <__libc_init_array+0x1e>
 800233c:	0800238c 	.word	0x0800238c
 8002340:	0800238c 	.word	0x0800238c
 8002344:	0800238c 	.word	0x0800238c
 8002348:	08002390 	.word	0x08002390

0800234c <memset>:
 800234c:	4402      	add	r2, r0
 800234e:	4603      	mov	r3, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <_init>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

08002368 <_fini>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr
