
stm32f769.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004480  08004480  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004488  08004488  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000074  08004504  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08004504  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00012fde  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000216b3  00000000  00000000  00033080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046e0  00000000  00000000  00054733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00058e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e828  00000000  00000000  00059b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000be0  00000000  00000000  00198328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036b3c  00000000  00000000  00198f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cfa44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  001cfa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	080043f8 	.word	0x080043f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	080043f8 	.word	0x080043f8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000552:	490e      	ldr	r1, [pc, #56]	; (800058c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000568:	4c0b      	ldr	r4, [pc, #44]	; (8000598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000576:	f000 fee3 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057a:	f003 fe13 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800057e:	f000 fb4f 	bl	8000c20 <main>
  bx  lr    
 8000582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000584:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000590:	08004490 	.word	0x08004490
  ldr r2, =_sbss
 8000594:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000598:	200000b0 	.word	0x200000b0

0800059c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005aa:	f3bf 8f6f 	isb	sy
}
 80005ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <SCB_EnableICache+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SCB_EnableICache+0x48>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <SCB_EnableICache+0x48>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SCB_EnableDCache+0x9c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <SCB_EnableDCache+0x9c>)
 8000602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000606:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0b5b      	lsrs	r3, r3, #13
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800061a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	015a      	lsls	r2, r3, #5
 8000620:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000624:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062a:	4917      	ldr	r1, [pc, #92]	; (8000688 <SCB_EnableDCache+0x9c>)
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf14      	ite	ne
 800063c:	2301      	movne	r3, #1
 800063e:	2300      	moveq	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <SCB_EnableDCache+0x5c>
      do {
 8000646:	e7e9      	b.n	800061c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1e5a      	subs	r2, r3, #1
 800064c:	60fa      	str	r2, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d000      	beq.n	800065e <SCB_EnableDCache+0x72>
    do {
 800065c:	e7d9      	b.n	8000612 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065e:	f3bf 8f4f 	dsb	sy
}
 8000662:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SCB_EnableDCache+0x9c>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SCB_EnableDCache+0x9c>)
 800066a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000670:	f3bf 8f4f 	dsb	sy
}
 8000674:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <_Z16SystemInitializev>:
#include "boot.hpp"

// System Initialize Function
QA_Result
SystemInitialize(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0c6      	sub	sp, #280	; 0x118
 8000690:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8000692:	f7ff ff85 	bl	80005a0 <SCB_EnableICache>
  SCB_EnableDCache();
 8000696:	f7ff ffa9 	bl	80005ec <SCB_EnableDCache>

  // adaptive real time accelerator
  // quicker access to in-build flash
  __HAL_FLASH_ART_ENABLE();
 800069a:	4b69      	ldr	r3, [pc, #420]	; (8000840 <_Z16SystemInitializev+0x1b4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a68      	ldr	r2, [pc, #416]	; (8000840 <_Z16SystemInitializev+0x1b4>)
 80006a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a4:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a6:	4b66      	ldr	r3, [pc, #408]	; (8000840 <_Z16SystemInitializev+0x1b4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a65      	ldr	r2, [pc, #404]	; (8000840 <_Z16SystemInitializev+0x1b4>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6013      	str	r3, [r2, #0]

  // so instead of major.minor interrupt priorities,
  // only have single number between 0-15
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b2:	2003      	movs	r0, #3
 80006b4:	f000 ff9a 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  // set systick to a high priority
  // systick is a timer built into ARM, so is consistent unlike peripheral timers
  // also only counts up and no capture modes
  // IMPORTANT: If setting systick to say 1ms, NVIC might dump some interrupts as too many
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fe53 	bl	8001364 <HAL_InitTick>
  // The processor has some sort of 'backup' domain circuitry,
  // i.e. memory and registers that are preserved on reset, code flashing
  // we want to have LSE as part of this 'backup' domain also
  // so it can power RTC?
  // to modify the 'backup' domain, must get access to it
  HAL_PWR_EnableBkUpAccess();
 80006be:	f001 f9ab 	bl	8001a18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c2:	4b60      	ldr	r3, [pc, #384]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 80006c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c6:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 80006c8:	f023 0318 	bic.w	r3, r3, #24
 80006cc:	6713      	str	r3, [r2, #112]	; 0x70

  // enable power management clock
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b5d      	ldr	r3, [pc, #372]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b5a      	ldr	r3, [pc, #360]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  // internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <_Z16SystemInitializev+0x1bc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a57      	ldr	r2, [pc, #348]	; (8000848 <_Z16SystemInitializev+0x1bc>)
 80006ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b55      	ldr	r3, [pc, #340]	; (8000848 <_Z16SystemInitializev+0x1bc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80006fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  // 1. enable oscillators and PLL so frequency output for system is what we want
  // 2. making sure bus clock and bus clock dividers are correct
  // 3. setup some peripheral clocks (most are driver specific)
  // 4. setup GPIO clocks and DMA clocks

  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fd78 	bl	80041fc <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800070c:	2305      	movs	r3, #5
 800070e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInit.HSEState = RCC_HSE_ON;
 8000712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState = RCC_LSE_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInit.PLL.PLLM = 25;
 800072e:	2319      	movs	r3, #25
 8000730:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN = 432;
 8000734:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000738:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ = 4;
 8000742:	2304      	movs	r3, #4
 8000744:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK)
 8000748:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f9c3 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <_Z16SystemInitializev+0xda>
  {
    return QA_Fail;
 8000762:	2301      	movs	r3, #1
 8000764:	e147      	b.n	80009f6 <_Z16SystemInitializev+0x36a>
  }

  // syscfg collection of registers not fitting elsewhere
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a36      	ldr	r2, [pc, #216]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <_Z16SystemInitializev+0x1b8>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
 800077c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  // overdrive mode ensures running smoothly at max. clock value
  // i.e. allow core to run at higher frequency than default
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077e:	f001 f95b 	bl	8001a38 <HAL_PWREx_EnableOverDrive>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <_Z16SystemInitializev+0x10a>
  {
  	return QA_Fail;
 8000792:	2301      	movs	r3, #1
 8000794:	e12f      	b.n	80009f6 <_Z16SystemInitializev+0x36a>
  }

  // enable cpu and bus clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000796:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80007a6:	230f      	movs	r3, #15
 80007a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK)
 80007c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007cc:	2107      	movs	r1, #7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fc30 	bl	8002034 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_Z16SystemInitializev+0x15c>
  {
    return QA_Fail;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e106      	b.n	80009f6 <_Z16SystemInitializev+0x36a>
  }

  // setup peripheral clocks
  // RTC is considered a peripheral?
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ec:	2290      	movs	r2, #144	; 0x90
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fd03 	bl	80041fc <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_USART1;
 80007f6:	2368      	movs	r3, #104	; 0x68
 80007f8:	643b      	str	r3, [r7, #64]	; 0x40

  // LTDC uses SAI PLL
  RCC_PeriphClkInit.PLLSAI.PLLSAIN = 384;
 80007fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphClkInit.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000800:	2303      	movs	r3, #3
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_PeriphClkInit.PLLSAI.PLLSAIR = 7;
 8000804:	2307      	movs	r3, #7
 8000806:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_PeriphClkInit.PLLSAI.PLLSAIQ = 8;
 8000808:	2308      	movs	r3, #8
 800080a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_PeriphClkInit.PLLSAIDivQ = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_PeriphClkInit.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000810:	2300      	movs	r3, #0
 8000812:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000818:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800081a:	2300      	movs	r3, #0
 800081c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8000820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fdeb 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d008      	beq.n	800084c <_Z16SystemInitializev+0x1c0>
  {
    return QA_Fail;
 800083a:	2301      	movs	r3, #1
 800083c:	e0db      	b.n	80009f6 <_Z16SystemInitializev+0x36a>
 800083e:	bf00      	nop
 8000840:	40023c00 	.word	0x40023c00
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
  }

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a6b      	ldr	r2, [pc, #428]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
 8000858:	4b69      	ldr	r3, [pc, #420]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a65      	ldr	r2, [pc, #404]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	4b60      	ldr	r3, [pc, #384]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a5f      	ldr	r2, [pc, #380]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a59      	ldr	r2, [pc, #356]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ac:	4b54      	ldr	r3, [pc, #336]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	623b      	str	r3, [r7, #32]
 80008c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	f003 0320 	and.w	r3, r3, #32
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008dc:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000902:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000904:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
 8000910:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8000918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800091c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
 8000938:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000940:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800094e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000952:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000968:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800096c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000976:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800097a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <_Z16SystemInitializev+0x374>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <_Z16SystemInitializev+0x374>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000990:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800099e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80009a2:	681b      	ldr	r3, [r3, #0]

  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80009b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009ca:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <_Z16SystemInitializev+0x374>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80009e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009f2:	681b      	ldr	r3, [r3, #0]


  return QA_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:

extern QAS_Serial_Dev_UART *Serial_UART;

void
NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

void
HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
	while(1) {}
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:
}

void
MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	while (1) {}
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:
}

void
BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
	while(1) {}
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:
}

void
UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	while(1) {}
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:
}

void
SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

void
DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

void
PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

void
SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a58:	f000 fcb4 	bl	80013c4 <HAL_IncTick>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  Serial_UART->handler(NULL);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <USART1_IRQHandler+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f8bf 	bl	8003bee <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000090 	.word	0x20000090

08000a78 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
	enum PinState : uint8_t {PinOff = 0, PinOn};

  GPIO_TypeDef *gpio;
  uint16_t pin;
  QAD_GPIO_Input() = delete;
  QAD_GPIO_Input(GPIO_TypeDef *gpio, uint16_t pin) :
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80fb      	strh	r3, [r7, #6]
  	gpio(gpio), pin(pin) {
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	809a      	strh	r2, [r3, #4]

    GPIO_InitTypeDef GPIO_Init;
    GPIO_Init.Pin = pin;
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(gpio, &GPIO_Init);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f000 fdef 	bl	800168c <HAL_GPIO_Init>
  }
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN14QAT_FIFOBufferC1Et>:
	// if these indexes don't match, then there is data waiting?
	uint16_t read_index;
	uint16_t write_index;

	QAT_FIFOBuffer() = delete;
  QAT_FIFOBuffer(uint16_t size) :
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
  	buffer(std::make_unique<uint8_t[]>(size)),
		size(size),
		read_index(0),
		write_index(0) {}
 8000ac4:	887a      	ldrh	r2, [r7, #2]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f960 	bl	8000d90 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	809a      	strh	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	80da      	strh	r2, [r3, #6]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	811a      	strh	r2, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

  QAS_Serial_Dev_Base() = delete;

  // members actually initialised in the order of their declaration, not init-list
  // so will get warning of this
  QAS_Serial_Dev_Base(uint16_t tx_fifo_size, uint16_t rx_fifo_size, DeviceType device_type) :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4603      	mov	r3, r0
 8000afc:	817b      	strh	r3, [r7, #10]
 8000afe:	460b      	mov	r3, r1
 8000b00:	813b      	strh	r3, [r7, #8]
 8000b02:	4613      	mov	r3, r2
 8000b04:	71fb      	strb	r3, [r7, #7]
    tx_fifo(std::make_unique<QAT_FIFOBuffer>(tx_fifo_size)),
    rx_fifo(std::make_unique<QAT_FIFOBuffer>(rx_fifo_size)),
    tx_state(PeriphInactive),
    rx_state(PeriphInactive),
    init_state(QA_NotInitialised),
    device_type(device_type) {}
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	f107 020a 	add.w	r2, r7, #10
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f956 	bl	8000dc8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	f107 0208 	add.w	r2, r7, #8
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f94e 	bl	8000dc8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	731a      	strb	r2, [r3, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2201      	movs	r2, #1
 8000b36:	735a      	strb	r2, [r3, #13]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	739a      	strb	r2, [r3, #14]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	79fa      	ldrb	r2, [r7, #7]
 8000b42:	73da      	strb	r2, [r3, #15]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08004428 	.word	0x08004428

08000b54 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:

  QAD_UART() = delete;

  // reference is just a name, cannot be NULL
  // it cannot be reassigned to something else, i.e. reseated
  QAD_UART(QAD_UART_InitStruct& init) :
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
		rx_pin(init.rx_pin),
    rx_af(init.rx_af),
		irq(USART1_IRQn),
		handle({0}),
		tx_state(PeriphInactive),
		rx_state(PeriphInactive) {}
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
		uart(init.uart),
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	781a      	ldrb	r2, [r3, #0]
		rx_state(PeriphInactive) {}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	705a      	strb	r2, [r3, #1]
    baud(init.baud),
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
		rx_state(PeriphInactive) {}
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	605a      	str	r2, [r3, #4]
		irq_priority(init.irq_priority),
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	7a1a      	ldrb	r2, [r3, #8]
		rx_state(PeriphInactive) {}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	721a      	strb	r2, [r3, #8]
		tx_gpio(init.tx_gpio),
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
		rx_state(PeriphInactive) {}
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
		tx_pin(init.tx_pin),
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	8a1a      	ldrh	r2, [r3, #16]
		rx_state(PeriphInactive) {}
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	821a      	strh	r2, [r3, #16]
    tx_af(init.tx_af),
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	7c9a      	ldrb	r2, [r3, #18]
		rx_state(PeriphInactive) {}
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	749a      	strb	r2, [r3, #18]
		rx_gpio(init.rx_gpio),
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	695a      	ldr	r2, [r3, #20]
		rx_state(PeriphInactive) {}
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	615a      	str	r2, [r3, #20]
		rx_pin(init.rx_pin),
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	8b1a      	ldrh	r2, [r3, #24]
		rx_state(PeriphInactive) {}
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	831a      	strh	r2, [r3, #24]
    rx_af(init.rx_af),
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	7e9a      	ldrb	r2, [r3, #26]
		rx_state(PeriphInactive) {}
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	769a      	strb	r2, [r3, #26]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2225      	movs	r2, #37	; 0x25
 8000bb0:	76da      	strb	r2, [r3, #27]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	331c      	adds	r3, #28
 8000bb6:	2288      	movs	r2, #136	; 0x88
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fb1e 	bl	80041fc <memset>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	QAD_UART_Periph periph;

	std::unique_ptr<QAD_UART> uart;

	QAS_Serial_Dev_UART() = delete;
	QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct &init) :
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
		QAS_Serial_Dev_Base(init.txfifo_size, init.rxfifo_size, DT_UART),
    periph(init.uart.uart),
		uart(std::make_unique<QAD_UART>(init.uart)) {}
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	8b99      	ldrh	r1, [r3, #28]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	8bda      	ldrh	r2, [r3, #30]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f7ff ff7b 	bl	8000aec <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000bf6:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	601a      	str	r2, [r3, #0]
    periph(init.uart.uart),
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
		uart(std::make_unique<QAD_UART>(init.uart)) {}
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	741a      	strb	r2, [r3, #16]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3314      	adds	r3, #20
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f8f6 	bl	8000dfe <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08004464 	.word	0x08004464

08000c20 <main>:

QAS_Serial_Dev_UART *Serial_UART;

int
main(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b093      	sub	sp, #76	; 0x4c
 8000c24:	af00      	add	r7, sp, #0
	uint32_t ticks = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t old_tick = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t new_tick = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t cur_tick = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t heartbeat_ticks = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63fb      	str	r3, [r7, #60]	; 0x3c
	const uint32_t heartbeat_tick_threshold = 500;
 8000c3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30

  // System setup
  if (SystemInitialize())
 8000c40:	f7ff fd24 	bl	800068c <_Z16SystemInitializev>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d000      	beq.n	8000c56 <main+0x36>
  {
    while (1) {}
 8000c54:	e7fe      	b.n	8000c54 <main+0x34>
  }

  // User LEDs
  QAD_GPIO_Output *gpio_user_led_red = new QAD_GPIO_Output(QA_USERLED_RED_GPIO_PORT, QA_USERLED_RED_GPIO_PIN);
 8000c56:	2008      	movs	r0, #8
 8000c58:	f003 fa66 	bl	8004128 <_Znwj>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461c      	mov	r4, r3
 8000c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c64:	4946      	ldr	r1, [pc, #280]	; (8000d80 <main+0x160>)
 8000c66:	4620      	mov	r0, r4
 8000c68:	f002 fcab 	bl	80035c2 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000c6c:	62fc      	str	r4, [r7, #44]	; 0x2c
  QAD_GPIO_Output *gpio_user_led_green = new QAD_GPIO_Output(QA_USERLED_GREEN_GPIO_PORT, QA_USERLED_GREEN_GPIO_PIN);
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f003 fa5a 	bl	8004128 <_Znwj>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461c      	mov	r4, r3
 8000c78:	2220      	movs	r2, #32
 8000c7a:	4941      	ldr	r1, [pc, #260]	; (8000d80 <main+0x160>)
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f002 fca0 	bl	80035c2 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000c82:	62bc      	str	r4, [r7, #40]	; 0x28

  QAD_GPIO_Input *gpio_user_button = new QAD_GPIO_Input(QA_USERBUTTON_GPIO_PORT, QA_USERBUTTON_GPIO_PIN);
 8000c84:	2008      	movs	r0, #8
 8000c86:	f003 fa4f 	bl	8004128 <_Znwj>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	2201      	movs	r2, #1
 8000c90:	493c      	ldr	r1, [pc, #240]	; (8000d84 <main+0x164>)
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff fef0 	bl	8000a78 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 8000c98:	627c      	str	r4, [r7, #36]	; 0x24

  QAS_Serial_Dev_UART_InitStruct serial_init = {};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 faab 	bl	80041fc <memset>
  serial_init.uart.uart = QAD_UART1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	713b      	strb	r3, [r7, #4]
  serial_init.uart.baud = QAD_UART1_BAUDRATE;
 8000caa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000cae:	60bb      	str	r3, [r7, #8]
  serial_init.uart.irq_priority = QAD_IRQPRIORITY_UART1;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	733b      	strb	r3, [r7, #12]
  serial_init.uart.tx_gpio = QAD_UART1_TX_PORT;
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <main+0x164>)
 8000cb6:	613b      	str	r3, [r7, #16]
  serial_init.uart.tx_pin = QAD_UART1_TX_PIN;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	82bb      	strh	r3, [r7, #20]
  serial_init.uart.tx_af = QAD_UART1_TX_AF;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	75bb      	strb	r3, [r7, #22]
  serial_init.uart.rx_gpio = QAD_UART1_RX_PORT;
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <main+0x164>)
 8000cc4:	61bb      	str	r3, [r7, #24]
  serial_init.uart.rx_pin = QAD_UART1_RX_PIN;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	83bb      	strh	r3, [r7, #28]
  serial_init.uart.rx_af = QAD_UART1_RX_AF;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	77bb      	strb	r3, [r7, #30]
  serial_init.txfifo_size = QAD_UART1_TX_FIFOSIZE;
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	843b      	strh	r3, [r7, #32]
  serial_init.rxfifo_size = QAD_UART1_RX_FIFOSIZE;
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	847b      	strh	r3, [r7, #34]	; 0x22
  Serial_UART = new QAS_Serial_Dev_UART(serial_init);
 8000cdc:	2018      	movs	r0, #24
 8000cde:	f003 fa23 	bl	8004128 <_Znwj>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff ff76 	bl	8000bdc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <main+0x168>)
 8000cf2:	601c      	str	r4, [r3, #0]

  if (Serial_UART->init(NULL) == QA_OK) {
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <main+0x168>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 ff54 	bl	8003ba8 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <main+0xfc>
    Serial_UART->txStringCR("Hello World!");
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <main+0x168>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	491d      	ldr	r1, [pc, #116]	; (8000d8c <main+0x16c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 ff79 	bl	8003c0e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }

  // Processing loop
	new_tick = HAL_GetTick();
 8000d1c:	f000 fb66 	bl	80013ec <HAL_GetTick>
 8000d20:	6438      	str	r0, [r7, #64]	; 0x40
	old_tick = new_tick;
 8000d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38

  while (1) {
  	cur_tick = HAL_GetTick();
 8000d26:	f000 fb61 	bl	80013ec <HAL_GetTick>
 8000d2a:	6378      	str	r0, [r7, #52]	; 0x34
  	// check more than 1ms elapsed since previous loop iteration
  	if (cur_tick != new_tick) {
 8000d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d012      	beq.n	8000d5a <main+0x13a>
  	  old_tick = new_tick;
 8000d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  	  new_tick = cur_tick;
 8000d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40

  	  // as cumulative ticks, if running longer than 52days, 32bit overflow will occur
  	  if (new_tick < old_tick) {
 8000d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d205      	bcs.n	8000d50 <main+0x130>
  	    ticks = new_tick + (0xffffffff - old_tick);
 8000d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d4e:	e006      	b.n	8000d5e <main+0x13e>
  	  } else {
  	    ticks = new_tick - old_tick;
 8000d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
 8000d58:	e001      	b.n	8000d5e <main+0x13e>
  	  }
  	} else {
  	  // ticks holds the amount of ms since last loop
  	  ticks = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	647b      	str	r3, [r7, #68]	; 0x44
  	}



  	// update heartbeat led
  	heartbeat_ticks += ticks;
 8000d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d62:	4413      	add	r3, r2
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  	if (heartbeat_ticks >= heartbeat_tick_threshold) {
 8000d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d6c:	d3db      	bcc.n	8000d26 <main+0x106>
      gpio_user_led_green->toggle();
 8000d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d70:	f002 fc70 	bl	8003654 <_ZN15QAD_GPIO_Output6toggleEv>
      heartbeat_ticks -= heartbeat_tick_threshold;
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  	cur_tick = HAL_GetTick();
 8000d7c:	e7d3      	b.n	8000d26 <main+0x106>
 8000d7e:	bf00      	nop
 8000d80:	40022400 	.word	0x40022400
 8000d84:	40020000 	.word	0x40020000
 8000d88:	20000090 	.word	0x20000090
 8000d8c:	08004410 	.word	0x08004410

08000d90 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000d9a:	683c      	ldr	r4, [r7, #0]
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f003 f9d4 	bl	800414a <_Znaj>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4618      	mov	r0, r3
 8000da6:	4602      	mov	r2, r0
 8000da8:	1e63      	subs	r3, r4, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db04      	blt.n	8000db8 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000dae:	2100      	movs	r1, #0
 8000db0:	7011      	strb	r1, [r2, #0]
 8000db2:	3201      	adds	r2, #1
 8000db4:	3b01      	subs	r3, #1
 8000db6:	e7f8      	b.n	8000daa <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000db8:	4601      	mov	r1, r0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f849 	bl	8000e52 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f000 f859 	bl	8000e8a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	881c      	ldrh	r4, [r3, #0]
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f003 f9a3 	bl	8004128 <_Znwj>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461d      	mov	r5, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	4628      	mov	r0, r5
 8000dea:	f7ff fe65 	bl	8000ab8 <_ZN14QAT_FIFOBufferC1Et>
 8000dee:	4629      	mov	r1, r5
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f865 	bl	8000ec0 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bdb0      	pop	{r4, r5, r7, pc}

08000dfe <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000dfe:	b5b0      	push	{r4, r5, r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f000 f875 	bl	8000ef8 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e0e:	4605      	mov	r5, r0
 8000e10:	20a8      	movs	r0, #168	; 0xa8
 8000e12:	f003 f989 	bl	8004128 <_Znwj>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461c      	mov	r4, r3
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fe99 	bl	8000b54 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000e22:	4621      	mov	r1, r4
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f882 	bl	8000f2e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}

08000e32 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f88f 	bl	8000f66 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ffe6 	bl	8000e32 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f887 	bl	8000f8e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_ZNSt15__uniq_ptr_dataI14QAT_FIFOBufferSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f886 	bl	8000fc2 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffe6 	bl	8000ea0 <_ZNSt15__uniq_ptr_dataI14QAT_FIFOBufferSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f87e 	bl	8000fea <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZNSt15__uniq_ptr_dataI8QAD_UARTSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f87d 	bl	800101e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffe6 	bl	8000f0e <_ZNSt15__uniq_ptr_dataI8QAD_UARTSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f875 	bl	8001046 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f881 	bl	800107a <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff79 	bl	8000e70 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f87b 	bl	8001094 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f87a 	bl	80010ac <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f877 	bl	80010c2 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff82 	bl	8000ede <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f871 	bl	80010dc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f870 	bl	80010f4 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f86d 	bl	800110a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff8b 	bl	8000f4c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001036:	4602      	mov	r2, r0
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f867 	bl	8001124 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f866 	bl	800113c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001070:	4603      	mov	r3, r0
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:
	tuple()
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f864 	bl	8001152 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff83 	bl	8000fa8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f850 	bl	8001172 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff8d 	bl	8001004 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f83c 	bl	8001192 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff97 	bl	8001060 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f829 	bl	80011b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f831 	bl	80011ca <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f833 	bl	80011e6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f83b 	bl	80011fe <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f83d 	bl	800121a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f845 	bl	8001232 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f847 	bl	800124e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f838 	bl	8001264 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f829 	bl	800127a <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return 1;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_kill>:

int _kill(int pid, int sig)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012aa:	f002 ff75 	bl	8004198 <__errno>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2216      	movs	r2, #22
 80012b2:	601a      	str	r2, [r3, #0]
  return -1;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_exit>:

void _exit (int status)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffe7 	bl	80012a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012d2:	e7fe      	b.n	80012d2 <_exit+0x12>

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f002 ff48 	bl	8004198 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20080000 	.word	0x20080000
 8001334:	00000400 	.word	0x00000400
 8001338:	20000094 	.word	0x20000094
 800133c:	200000b0 	.word	0x200000b0

08001340 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f975 	bl	8001672 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000098 	.word	0x20000098

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000098 	.word	0x20000098

08001404 <__NVIC_SetPriorityGrouping>:
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	05fa0000 	.word	0x05fa0000

0800144c <__NVIC_GetPriorityGrouping>:
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_DisableIRQ>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db12      	blt.n	80014dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	490a      	ldr	r1, [pc, #40]	; (80014e8 <__NVIC_DisableIRQ+0x44>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	3320      	adds	r3, #32
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80014d0:	f3bf 8f4f 	dsb	sy
}
 80014d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014d6:	f3bf 8f6f 	isb	sy
}
 80014da:	bf00      	nop
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff05 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff1a 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff0d 	bl	8001468 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff1d 	bl	80014a4 <__NVIC_DisableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff94 	bl	80015a8 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e175      	b.n	8001998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8164 	bne.w	8001992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x56>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80be 	beq.w	8001992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_GPIO_Init+0x324>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_GPIO_Init+0x324>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_GPIO_Init+0x324>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800182e:	4a61      	ldr	r2, [pc, #388]	; (80019b4 <HAL_GPIO_Init+0x328>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a58      	ldr	r2, [pc, #352]	; (80019b8 <HAL_GPIO_Init+0x32c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d037      	beq.n	80018ca <HAL_GPIO_Init+0x23e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_GPIO_Init+0x330>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <HAL_GPIO_Init+0x23a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a56      	ldr	r2, [pc, #344]	; (80019c0 <HAL_GPIO_Init+0x334>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d02b      	beq.n	80018c2 <HAL_GPIO_Init+0x236>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_GPIO_Init+0x338>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x232>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x33c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a53      	ldr	r2, [pc, #332]	; (80019cc <HAL_GPIO_Init+0x340>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x22a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_GPIO_Init+0x344>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a51      	ldr	r2, [pc, #324]	; (80019d4 <HAL_GPIO_Init+0x348>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x222>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a50      	ldr	r2, [pc, #320]	; (80019d8 <HAL_GPIO_Init+0x34c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x21e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4f      	ldr	r2, [pc, #316]	; (80019dc <HAL_GPIO_Init+0x350>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x21a>
 80018a2:	2309      	movs	r3, #9
 80018a4:	e012      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018a6:	230a      	movs	r3, #10
 80018a8:	e010      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e00e      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e00a      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018dc:	4935      	ldr	r1, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x328>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_GPIO_Init+0x354>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190e:	4a34      	ldr	r2, [pc, #208]	; (80019e0 <HAL_GPIO_Init+0x354>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_GPIO_Init+0x354>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_GPIO_Init+0x354>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_GPIO_Init+0x354>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_GPIO_Init+0x354>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_GPIO_Init+0x354>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_GPIO_Init+0x354>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f ae86 	bls.w	80016ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40021400 	.word	0x40021400
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40021c00 	.word	0x40021c00
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40022400 	.word	0x40022400
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a66:	f7ff fcc1 	bl	80013ec <HAL_GetTick>
 8001a6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a6c:	e009      	b.n	8001a82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6e:	f7ff fcbd 	bl	80013ec <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7c:	d901      	bls.n	8001a82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e022      	b.n	8001ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9c:	f7ff fca6 	bl	80013ec <HAL_GetTick>
 8001aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aa2:	e009      	b.n	8001ab8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001aa4:	f7ff fca2 	bl	80013ec <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab2:	d901      	bls.n	8001ab8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e007      	b.n	8001ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e29b      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afc:	4b96      	ldr	r3, [pc, #600]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b08:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x62>
 8001b14:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d06c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x130>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d168      	bne.n	8001c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e275      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x7a>
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a83      	ldr	r2, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e02e      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x9c>
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7b      	ldr	r2, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a72      	ldr	r2, [pc, #456]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd8>
 8001b98:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6e      	ldr	r2, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6b      	ldr	r2, [pc, #428]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fc18 	bl	80013ec <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc14 	bl	80013ec <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e229      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe8>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc04 	bl	80013ec <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc00 	bl	80013ec <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e215      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x110>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d069      	beq.n	8001cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c16:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x190>
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x17a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1e9      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	493d      	ldr	r1, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e040      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fbb6 	bl	80013ec <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fbb2 	bl	80013ec <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4929      	ldr	r1, [pc, #164]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
 8001cb6:	e018      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fb92 	bl	80013ec <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fb8e 	bl	80013ec <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1a3      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d038      	beq.n	8001d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb6f 	bl	80013ec <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff fb6b 	bl	80013ec <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e180      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x23a>
 8001d30:	e01a      	b.n	8001d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_RCC_OscConfig+0x280>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb55 	bl	80013ec <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fb51 	bl	80013ec <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d903      	bls.n	8001d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e166      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
 8001d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b92      	ldr	r3, [pc, #584]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a4 	beq.w	8001ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a88      	ldr	r2, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b86      	ldr	r3, [pc, #536]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x4d4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001daa:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7f      	ldr	r2, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x4d4>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fb19 	bl	80013ec <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff fb15 	bl	80013ec <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e12a      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd0:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x4d4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x31a>
 8001de4:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x33c>
 8001dfa:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a67      	ldr	r2, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
 8001e12:	e01c      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x35e>
 8001e1c:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a61      	ldr	r2, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fac9 	bl	80013ec <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fac5 	bl	80013ec <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0d8      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ee      	beq.n	8001e5e <HAL_RCC_OscConfig+0x386>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fab3 	bl	80013ec <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff faaf 	bl	80013ec <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0c2      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80ae 	beq.w	8002024 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d06d      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d14b      	bne.n	8001f74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fa80 	bl	80013ec <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff fa7c 	bl	80013ec <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e091      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	071b      	lsls	r3, r3, #28
 8001f3a:	491b      	ldr	r1, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa4e 	bl	80013ec <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff fa4a 	bl	80013ec <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e05f      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x47c>
 8001f72:	e057      	b.n	8002024 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fa34 	bl	80013ec <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fa30 	bl	80013ec <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4b0>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x54c>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_OscConfig+0x558>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d030      	beq.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d129      	bne.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d122      	bne.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fe6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d119      	bne.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10f      	bne.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	4965      	ldr	r1, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e073      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4936      	ldr	r1, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002128:	f7ff f960 	bl	80013ec <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff f95c 	bl	80013ec <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e053      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1d0>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f8bc 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	08004444 	.word	0x08004444
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002210:	b090      	sub	sp, #64	; 0x40
 8002212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	2300      	movs	r3, #0
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221c:	2300      	movs	r3, #0
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d00d      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x40>
 8002230:	2b08      	cmp	r3, #8
 8002232:	f200 80a1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x16c>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 800223a:	2b04      	cmp	r3, #4
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x3a>
 800223e:	e09b      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_GetSysClockFreq+0x184>)
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002244:	e09b      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800224a:	e098      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224c:	4b4f      	ldr	r3, [pc, #316]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d028      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	2200      	movs	r2, #0
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	627a      	str	r2, [r7, #36]	; 0x24
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002274:	2100      	movs	r1, #0
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002278:	fb03 f201 	mul.w	r2, r3, r1
 800227c:	2300      	movs	r3, #0
 800227e:	fb00 f303 	mul.w	r3, r0, r3
 8002282:	4413      	add	r3, r2
 8002284:	4a43      	ldr	r2, [pc, #268]	; (8002394 <HAL_RCC_GetSysClockFreq+0x188>)
 8002286:	fba0 1202 	umull	r1, r2, r0, r2
 800228a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800228c:	460a      	mov	r2, r1
 800228e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002292:	4413      	add	r3, r2
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	2200      	movs	r2, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	61fa      	str	r2, [r7, #28]
 800229e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022a6:	f7fd ffcf 	bl	8000248 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4613      	mov	r3, r2
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b2:	e053      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	2200      	movs	r2, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	617a      	str	r2, [r7, #20]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022c6:	f04f 0b00 	mov.w	fp, #0
 80022ca:	4652      	mov	r2, sl
 80022cc:	465b      	mov	r3, fp
 80022ce:	f04f 0000 	mov.w	r0, #0
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	0159      	lsls	r1, r3, #5
 80022d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022dc:	0150      	lsls	r0, r2, #5
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ebb2 080a 	subs.w	r8, r2, sl
 80022e6:	eb63 090b 	sbc.w	r9, r3, fp
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002302:	eb63 0509 	sbc.w	r5, r3, r9
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	00eb      	lsls	r3, r5, #3
 8002310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002314:	00e2      	lsls	r2, r4, #3
 8002316:	4614      	mov	r4, r2
 8002318:	461d      	mov	r5, r3
 800231a:	eb14 030a 	adds.w	r3, r4, sl
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	eb45 030b 	adc.w	r3, r5, fp
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002332:	4629      	mov	r1, r5
 8002334:	028b      	lsls	r3, r1, #10
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800233c:	4621      	mov	r1, r4
 800233e:	028a      	lsls	r2, r1, #10
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002346:	2200      	movs	r2, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002350:	f7fd ff7a 	bl	8000248 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800236c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetSysClockFreq+0x184>)
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002380:	4618      	mov	r0, r3
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	017d7840 	.word	0x017d7840

08002398 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0a9b      	lsrs	r3, r3, #10
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08004454 	.word	0x08004454

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08004454 	.word	0x08004454

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002428:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a68      	ldr	r2, [pc, #416]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	4964      	ldr	r1, [pc, #400]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d017      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	4959      	ldr	r1, [pc, #356]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d017      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	494a      	ldr	r1, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 808b 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a39      	ldr	r2, [pc, #228]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7fe ff70 	bl	80013ec <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7fe ff6c 	bl	80013ec <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e38f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002522:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d035      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d02e      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d114      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe ff34 	bl	80013ec <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe ff30 	bl	80013ec <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e351      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ee      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b6:	d111      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025c6:	400b      	ands	r3, r1
 80025c8:	4901      	ldr	r1, [pc, #4]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000
 80025d8:	0ffffcff 	.word	0x0ffffcff
 80025dc:	4bac      	ldr	r3, [pc, #688]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4aab      	ldr	r2, [pc, #684]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	4ba9      	ldr	r3, [pc, #676]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	49a6      	ldr	r1, [pc, #664]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002606:	4ba2      	ldr	r3, [pc, #648]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260c:	4aa0      	ldr	r2, [pc, #640]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002612:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002616:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002618:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	499b      	ldr	r1, [pc, #620]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002634:	4b96      	ldr	r3, [pc, #600]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002642:	4993      	ldr	r1, [pc, #588]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002656:	4b8e      	ldr	r3, [pc, #568]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002664:	498a      	ldr	r1, [pc, #552]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002678:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	4982      	ldr	r1, [pc, #520]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800269a:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4979      	ldr	r1, [pc, #484]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4971      	ldr	r1, [pc, #452]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f023 020c 	bic.w	r2, r3, #12
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	4968      	ldr	r1, [pc, #416]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4960      	ldr	r1, [pc, #384]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	4957      	ldr	r1, [pc, #348]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002744:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	494f      	ldr	r1, [pc, #316]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	4946      	ldr	r1, [pc, #280]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	493e      	ldr	r1, [pc, #248]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b8:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fc:	4924      	ldr	r1, [pc, #144]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	4914      	ldr	r1, [pc, #80]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002860:	490b      	ldr	r1, [pc, #44]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00f      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002884:	4902      	ldr	r1, [pc, #8]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800288c:	e002      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028a0:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	4986      	ldr	r1, [pc, #536]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028c4:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	497d      	ldr	r1, [pc, #500]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d006      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80d6 	beq.w	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f0:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fd76 	bl	80013ec <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002904:	f7fe fd72 	bl	80013ec <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e195      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d021      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d11d      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002944:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	0e1b      	lsrs	r3, r3, #24
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	019a      	lsls	r2, r3, #6
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	071b      	lsls	r3, r3, #28
 800296a:	4958      	ldr	r1, [pc, #352]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02e      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d129      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ac:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b2:	0f1b      	lsrs	r3, r3, #28
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	019a      	lsls	r2, r3, #6
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	071b      	lsls	r3, r3, #28
 80029d2:	493e      	ldr	r1, [pc, #248]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029da:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e0:	f023 021f 	bic.w	r2, r3, #31
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	3b01      	subs	r3, #1
 80029ea:	4938      	ldr	r1, [pc, #224]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01d      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a04:	0e1b      	lsrs	r3, r3, #24
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a12:	0f1b      	lsrs	r3, r3, #28
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	019a      	lsls	r2, r3, #6
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	061b      	lsls	r3, r3, #24
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	071b      	lsls	r3, r3, #28
 8002a32:	4926      	ldr	r1, [pc, #152]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d011      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	019a      	lsls	r2, r3, #6
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	071b      	lsls	r3, r3, #28
 8002a62:	491a      	ldr	r1, [pc, #104]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a76:	f7fe fcb9 	bl	80013ec <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a7e:	f7fe fcb5 	bl	80013ec <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0d8      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	f040 80ce 	bne.w	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fc9c 	bl	80013ec <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ab8:	f7fe fc98 	bl	80013ec <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d904      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0bb      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002adc:	d0ec      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02e      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d12a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b06:	4b51      	ldr	r3, [pc, #324]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b14:	4b4d      	ldr	r3, [pc, #308]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	0f1b      	lsrs	r3, r3, #28
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	019a      	lsls	r2, r3, #6
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	071b      	lsls	r3, r3, #28
 8002b3a:	4944      	ldr	r1, [pc, #272]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b42:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	493d      	ldr	r1, [pc, #244]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d022      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b70:	d11d      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	0e1b      	lsrs	r3, r3, #24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	0f1b      	lsrs	r3, r3, #28
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	019a      	lsls	r2, r3, #6
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	061b      	lsls	r3, r3, #24
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	4929      	ldr	r1, [pc, #164]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	0e1b      	lsrs	r3, r3, #24
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	019a      	lsls	r2, r3, #6
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	431a      	orrs	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	4917      	ldr	r1, [pc, #92]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4911      	ldr	r1, [pc, #68]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe fbe8 	bl	80013ec <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c20:	f7fe fbe4 	bl	80013ec <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e007      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3e:	d1ef      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e040      	b.n	8002ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f877 	bl	8002d66 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f87e 	bl	8002d90 <UART_SetConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e022      	b.n	8002ce4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fad6 	bl	8003258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fb5d 	bl	800339c <UART_CheckIdleState>
 8002ce2:	4603      	mov	r3, r0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02f      	b.n	8002d5e <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2224      	movs	r2, #36	; 0x24
 8002d02:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f824 	bl	8002d7a <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4ba6      	ldr	r3, [pc, #664]	; (8003054 <UART_SetConfig+0x2c4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a94      	ldr	r2, [pc, #592]	; (8003058 <UART_SetConfig+0x2c8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d120      	bne.n	8002e4e <UART_SetConfig+0xbe>
 8002e0c:	4b93      	ldr	r3, [pc, #588]	; (800305c <UART_SetConfig+0x2cc>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d816      	bhi.n	8002e48 <UART_SetConfig+0xb8>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <UART_SetConfig+0x90>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e3d 	.word	0x08002e3d
 8002e28:	08002e37 	.word	0x08002e37
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	2301      	movs	r3, #1
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e150      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e14d      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e14a      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e147      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e144      	b.n	80030d8 <UART_SetConfig+0x348>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a83      	ldr	r2, [pc, #524]	; (8003060 <UART_SetConfig+0x2d0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d132      	bne.n	8002ebe <UART_SetConfig+0x12e>
 8002e58:	4b80      	ldr	r3, [pc, #512]	; (800305c <UART_SetConfig+0x2cc>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d828      	bhi.n	8002eb8 <UART_SetConfig+0x128>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <UART_SetConfig+0xdc>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002eb9 	.word	0x08002eb9
 8002e78:	08002eb9 	.word	0x08002eb9
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002eb9 	.word	0x08002eb9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002eb9 	.word	0x08002eb9
 8002e8c:	08002ea7 	.word	0x08002ea7
 8002e90:	08002eb9 	.word	0x08002eb9
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002eb9 	.word	0x08002eb9
 8002e9c:	08002eb3 	.word	0x08002eb3
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e118      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e115      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eac:	2304      	movs	r3, #4
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e112      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e10f      	b.n	80030d8 <UART_SetConfig+0x348>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e10c      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a68      	ldr	r2, [pc, #416]	; (8003064 <UART_SetConfig+0x2d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d120      	bne.n	8002f0a <UART_SetConfig+0x17a>
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <UART_SetConfig+0x2cc>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed2:	2b30      	cmp	r3, #48	; 0x30
 8002ed4:	d013      	beq.n	8002efe <UART_SetConfig+0x16e>
 8002ed6:	2b30      	cmp	r3, #48	; 0x30
 8002ed8:	d814      	bhi.n	8002f04 <UART_SetConfig+0x174>
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d009      	beq.n	8002ef2 <UART_SetConfig+0x162>
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d810      	bhi.n	8002f04 <UART_SetConfig+0x174>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <UART_SetConfig+0x15c>
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d006      	beq.n	8002ef8 <UART_SetConfig+0x168>
 8002eea:	e00b      	b.n	8002f04 <UART_SetConfig+0x174>
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e0f2      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e0ef      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e0ec      	b.n	80030d8 <UART_SetConfig+0x348>
 8002efe:	2308      	movs	r3, #8
 8002f00:	77fb      	strb	r3, [r7, #31]
 8002f02:	e0e9      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f04:	2310      	movs	r3, #16
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e0e6      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <UART_SetConfig+0x2d8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <UART_SetConfig+0x1c6>
 8002f14:	4b51      	ldr	r3, [pc, #324]	; (800305c <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f20:	d013      	beq.n	8002f4a <UART_SetConfig+0x1ba>
 8002f22:	2bc0      	cmp	r3, #192	; 0xc0
 8002f24:	d814      	bhi.n	8002f50 <UART_SetConfig+0x1c0>
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d009      	beq.n	8002f3e <UART_SetConfig+0x1ae>
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d810      	bhi.n	8002f50 <UART_SetConfig+0x1c0>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <UART_SetConfig+0x1a8>
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d006      	beq.n	8002f44 <UART_SetConfig+0x1b4>
 8002f36:	e00b      	b.n	8002f50 <UART_SetConfig+0x1c0>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e0cc      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e0c9      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e0c6      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e0c3      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e0c0      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a44      	ldr	r2, [pc, #272]	; (800306c <UART_SetConfig+0x2dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d125      	bne.n	8002fac <UART_SetConfig+0x21c>
 8002f60:	4b3e      	ldr	r3, [pc, #248]	; (800305c <UART_SetConfig+0x2cc>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f6e:	d017      	beq.n	8002fa0 <UART_SetConfig+0x210>
 8002f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f74:	d817      	bhi.n	8002fa6 <UART_SetConfig+0x216>
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	d00b      	beq.n	8002f94 <UART_SetConfig+0x204>
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d811      	bhi.n	8002fa6 <UART_SetConfig+0x216>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <UART_SetConfig+0x1fe>
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d006      	beq.n	8002f9a <UART_SetConfig+0x20a>
 8002f8c:	e00b      	b.n	8002fa6 <UART_SetConfig+0x216>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e0a1      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f94:	2302      	movs	r3, #2
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e09e      	b.n	80030d8 <UART_SetConfig+0x348>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e09b      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e098      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e095      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <UART_SetConfig+0x2e0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d125      	bne.n	8003002 <UART_SetConfig+0x272>
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <UART_SetConfig+0x2cc>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc4:	d017      	beq.n	8002ff6 <UART_SetConfig+0x266>
 8002fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fca:	d817      	bhi.n	8002ffc <UART_SetConfig+0x26c>
 8002fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd0:	d00b      	beq.n	8002fea <UART_SetConfig+0x25a>
 8002fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd6:	d811      	bhi.n	8002ffc <UART_SetConfig+0x26c>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <UART_SetConfig+0x254>
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x260>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x26c>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e076      	b.n	80030d8 <UART_SetConfig+0x348>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e073      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e070      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e06d      	b.n	80030d8 <UART_SetConfig+0x348>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e06a      	b.n	80030d8 <UART_SetConfig+0x348>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <UART_SetConfig+0x2e4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d138      	bne.n	800307e <UART_SetConfig+0x2ee>
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <UART_SetConfig+0x2cc>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800301a:	d017      	beq.n	800304c <UART_SetConfig+0x2bc>
 800301c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003020:	d82a      	bhi.n	8003078 <UART_SetConfig+0x2e8>
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d00b      	beq.n	8003040 <UART_SetConfig+0x2b0>
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d824      	bhi.n	8003078 <UART_SetConfig+0x2e8>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <UART_SetConfig+0x2aa>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d006      	beq.n	8003046 <UART_SetConfig+0x2b6>
 8003038:	e01e      	b.n	8003078 <UART_SetConfig+0x2e8>
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e04b      	b.n	80030d8 <UART_SetConfig+0x348>
 8003040:	2302      	movs	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e048      	b.n	80030d8 <UART_SetConfig+0x348>
 8003046:	2304      	movs	r3, #4
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e045      	b.n	80030d8 <UART_SetConfig+0x348>
 800304c:	2308      	movs	r3, #8
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e042      	b.n	80030d8 <UART_SetConfig+0x348>
 8003052:	bf00      	nop
 8003054:	efff69f3 	.word	0xefff69f3
 8003058:	40011000 	.word	0x40011000
 800305c:	40023800 	.word	0x40023800
 8003060:	40004400 	.word	0x40004400
 8003064:	40004800 	.word	0x40004800
 8003068:	40004c00 	.word	0x40004c00
 800306c:	40005000 	.word	0x40005000
 8003070:	40011400 	.word	0x40011400
 8003074:	40007800 	.word	0x40007800
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e02c      	b.n	80030d8 <UART_SetConfig+0x348>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <UART_SetConfig+0x4bc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d125      	bne.n	80030d4 <UART_SetConfig+0x344>
 8003088:	4b71      	ldr	r3, [pc, #452]	; (8003250 <UART_SetConfig+0x4c0>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003092:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003096:	d017      	beq.n	80030c8 <UART_SetConfig+0x338>
 8003098:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800309c:	d817      	bhi.n	80030ce <UART_SetConfig+0x33e>
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d00b      	beq.n	80030bc <UART_SetConfig+0x32c>
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d811      	bhi.n	80030ce <UART_SetConfig+0x33e>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <UART_SetConfig+0x326>
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b2:	d006      	beq.n	80030c2 <UART_SetConfig+0x332>
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x33e>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e00d      	b.n	80030d8 <UART_SetConfig+0x348>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e00a      	b.n	80030d8 <UART_SetConfig+0x348>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e007      	b.n	80030d8 <UART_SetConfig+0x348>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e004      	b.n	80030d8 <UART_SetConfig+0x348>
 80030ce:	2310      	movs	r3, #16
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e001      	b.n	80030d8 <UART_SetConfig+0x348>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d15b      	bne.n	800319a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d828      	bhi.n	800313a <UART_SetConfig+0x3aa>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x360>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003125 	.word	0x08003125
 80030fc:	0800313b 	.word	0x0800313b
 8003100:	0800312b 	.word	0x0800312b
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800313b 	.word	0x0800313b
 800310c:	0800313b 	.word	0x0800313b
 8003110:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff f94c 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8003118:	61b8      	str	r0, [r7, #24]
        break;
 800311a:	e013      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7ff f95c 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003120:	61b8      	str	r0, [r7, #24]
        break;
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <UART_SetConfig+0x4c4>)
 8003126:	61bb      	str	r3, [r7, #24]
        break;
 8003128:	e00c      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7ff f86f 	bl	800220c <HAL_RCC_GetSysClockFreq>
 800312e:	61b8      	str	r0, [r7, #24]
        break;
 8003130:	e008      	b.n	8003144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e004      	b.n	8003144 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77bb      	strb	r3, [r7, #30]
        break;
 8003142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d074      	beq.n	8003234 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	005a      	lsls	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	d916      	bls.n	8003194 <UART_SetConfig+0x404>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d212      	bcs.n	8003194 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	b29a      	uxth	r2, r3
 8003184:	89fb      	ldrh	r3, [r7, #14]
 8003186:	4313      	orrs	r3, r2
 8003188:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e04f      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	77bb      	strb	r3, [r7, #30]
 8003198:	e04c      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d828      	bhi.n	80031f2 <UART_SetConfig+0x462>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x418>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031f3 	.word	0x080031f3
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	080031f3 	.word	0x080031f3
 80031c4:	080031f3 	.word	0x080031f3
 80031c8:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7ff f8f0 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e013      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff f900 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 80031d8:	61b8      	str	r0, [r7, #24]
        break;
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <UART_SetConfig+0x4c4>)
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e00c      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7ff f813 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80031e6:	61b8      	str	r0, [r7, #24]
        break;
 80031e8:	e008      	b.n	80031fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	61bb      	str	r3, [r7, #24]
        break;
 80031f0:	e004      	b.n	80031fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77bb      	strb	r3, [r7, #30]
        break;
 80031fa:	bf00      	nop
    }

    if (pclk != 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	085a      	lsrs	r2, r3, #1
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d909      	bls.n	8003230 <UART_SetConfig+0x4a0>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d205      	bcs.n	8003230 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e001      	b.n	8003234 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003240:	7fbb      	ldrb	r3, [r7, #30]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40007c00 	.word	0x40007c00
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400

08003258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003356:	d10a      	bne.n	800336e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033ac:	f7fe f81e 	bl	80013ec <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10e      	bne.n	80033de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f831 	bl	8003436 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e027      	b.n	800342e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d10e      	bne.n	800340a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f81b 	bl	8003436 <UART_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e011      	b.n	800342e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b09c      	sub	sp, #112	; 0x70
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003446:	e0a7      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344e:	f000 80a3 	beq.w	8003598 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fd ffcb 	bl	80013ec <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <UART_WaitOnFlagUntilTimeout+0x32>
 8003462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003464:	2b00      	cmp	r3, #0
 8003466:	d13f      	bne.n	80034e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800347c:	667b      	str	r3, [r7, #100]	; 0x64
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003488:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800348c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e6      	bne.n	8003468 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	663b      	str	r3, [r7, #96]	; 0x60
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e068      	b.n	80035ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d050      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003504:	d148      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
 8003530:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e6      	bne.n	8003510 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3308      	adds	r3, #8
 8003548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	613b      	str	r3, [r7, #16]
   return(result);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	66bb      	str	r3, [r7, #104]	; 0x68
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003562:	623a      	str	r2, [r7, #32]
 8003564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	69f9      	ldr	r1, [r7, #28]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e010      	b.n	80035ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f43f af48 	beq.w	8003448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3770      	adds	r7, #112	; 0x70
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
 *  Created on: 12 Jan. 2023
 *      Author: ryan
 */
#include "QAD_GPIO.hpp"

QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef *gpio, uint16_t pin) :
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08a      	sub	sp, #40	; 0x28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
    gpio(gpio), pin(pin), state(PinOff) {
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	809a      	strh	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	719a      	strb	r2, [r3, #6]

    GPIO_InitTypeDef GPIO_Init;
    GPIO_Init.Pin = pin;
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(gpio, &GPIO_Init);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	68b8      	ldr	r0, [r7, #8]
 80035fa:	f7fe f847 	bl	800168c <HAL_GPIO_Init>
  }
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4618      	mov	r0, r3
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZN15QAD_GPIO_Output2onEv>:
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;

    HAL_GPIO_Init(gpio, &GPIO_Init);
  }

  void QAD_GPIO_Output::on(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  	HAL_GPIO_WritePin(gpio, pin, GPIO_PIN_SET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	889b      	ldrh	r3, [r3, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	4619      	mov	r1, r3
 800361c:	f7fe f9e2 	bl	80019e4 <HAL_GPIO_WritePin>
  	state = PinOn;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	719a      	strb	r2, [r3, #6]
  }
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_ZN15QAD_GPIO_Output3offEv>:

  void QAD_GPIO_Output::off(void) {
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  	HAL_GPIO_WritePin(gpio, pin, GPIO_PIN_RESET);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	889b      	ldrh	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	4619      	mov	r1, r3
 8003642:	f7fe f9cf 	bl	80019e4 <HAL_GPIO_WritePin>
  	state = PinOff;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	719a      	strb	r2, [r3, #6]
  }
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZN15QAD_GPIO_Output6toggleEv>:

  void QAD_GPIO_Output::toggle(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  	if (state == PinOn) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	799b      	ldrb	r3, [r3, #6]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d103      	bne.n	800366c <_ZN15QAD_GPIO_Output6toggleEv+0x18>
  		off();
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ffe2 	bl	800362e <_ZN15QAD_GPIO_Output3offEv>
  	} else {
  		on();
  	}
  }
 800366a:	e002      	b.n	8003672 <_ZN15QAD_GPIO_Output6toggleEv+0x1e>
  		on();
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ffcb 	bl	8003608 <_ZN15QAD_GPIO_Output2onEv>
  }
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_ZN8QAD_UART4initEv>:
 *  Created on: 17 Jan. 2023
 *      Author: ryan
 */
#include "QAD_UART.hpp"

QA_Result QAD_UART::init(void) {
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  if (state == PeriphActive) return QA_Fail;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <_ZN8QAD_UART4initEv+0x14>
 800368a:	2301      	movs	r3, #1
 800368c:	e010      	b.n	80036b0 <_ZN8QAD_UART4initEv+0x36>

  if (periphInit()) {
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8a8 	bl	80037e4 <_ZN8QAD_UART10periphInitEv>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <_ZN8QAD_UART4initEv+0x2e>
    return QA_Fail;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e003      	b.n	80036b0 <_ZN8QAD_UART4initEv+0x36>
  }

  state = PeriphActive;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_ZN8QAD_UART6deinitEv>:

void QAD_UART::deinit(void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if (state != PeriphActive) return;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <_ZN8QAD_UART6deinitEv+0x20>

  periphDeinit(DeinitFull);
 80036c8:	2101      	movs	r1, #1
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9e2 	bl	8003a94 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  state = PeriphInactive;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e000      	b.n	80036da <_ZN8QAD_UART6deinitEv+0x22>
  if (state != PeriphActive) return;
 80036d8:	bf00      	nop
}
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZN8QAD_UART9getHandleEv>:

QAD_UART::PeriphState QAD_UART::getState(void) {
  return state;
}

UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return handle;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	331c      	adds	r3, #28
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_ZN8QAD_UART8start_txEv>:

void QAD_UART::start_tx(void) {
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	// interrupt when tx register is empty
	// so, will ask when it wants more data
	__HAL_UART_ENABLE_IT(&handle, UART_IT_TXE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800370e:	601a      	str	r2, [r3, #0]
  tx_state = PeriphActive;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <_ZN8QAD_UART7stop_txEv>:

void QAD_UART::stop_tx(void) {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(&handle, UART_IT_TXE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373a:	601a      	str	r2, [r3, #0]
  tx_state = PeriphInactive;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_ZN8QAD_UART8start_rxEv>:

QAD_UART::PeriphState QAD_UART::get_tx_state(void) {
	return tx_state;
}

void QAD_UART::start_rx(void) {
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(&handle, UART_IT_RXNE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f042 0220 	orr.w	r2, r2, #32
 8003766:	601a      	str	r2, [r3, #0]
	rx_state = PeriphActive;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_ZN8QAD_UART7stop_rxEv>:

void QAD_UART::stop_rx(void) {
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(&handle, UART_IT_RXNE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f022 0220 	bic.w	r2, r2, #32
 8003792:	601a      	str	r2, [r3, #0]
	rx_state = PeriphInactive;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <_ZN8QAD_UART7data_txEh>:

QAD_UART::PeriphState QAD_UART::get_rx_state(void) {
	return rx_state;
}

void QAD_UART::data_tx(uint8_t data) {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  handle.Instance->TDR = data;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_ZN8QAD_UART7data_rxEv>:

uint8_t QAD_UART::data_rx(void) {
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return handle.Instance->RDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	b2db      	uxtb	r3, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_ZN8QAD_UART10periphInitEv>:

QA_Result QAD_UART::periphInit(void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80037ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]

	GPIO_Init.Pin = tx_pin;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8a1b      	ldrh	r3, [r3, #16]
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_Init.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init.Alternate = tx_af;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7c9b      	ldrb	r3, [r3, #18]
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(tx_gpio, &GPIO_Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd ff34 	bl	800168c <HAL_GPIO_Init>

	GPIO_Init.Pin = rx_pin;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8b1b      	ldrh	r3, [r3, #24]
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
	// prevent possible spurious reads of a start bit resulting from floating state
	GPIO_Init.Pull = GPIO_PULLUP;
 800382e:	2301      	movs	r3, #1
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init.Alternate = rx_af;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7e9b      	ldrb	r3, [r3, #26]
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(rx_gpio, &GPIO_Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd ff20 	bl	800168c <HAL_GPIO_Init>

	switch (uart) {
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b05      	cmp	r3, #5
 8003852:	f200 80c9 	bhi.w	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <_ZN8QAD_UART10periphInitEv+0x78>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	08003875 	.word	0x08003875
 8003860:	080038b3 	.word	0x080038b3
 8003864:	080038f1 	.word	0x080038f1
 8003868:	0800392f 	.word	0x0800392f
 800386c:	0800396d 	.word	0x0800396d
 8003870:	080039ab 	.word	0x080039ab
	  case (QAD_UART1): {
	    __HAL_RCC_USART1_CLK_ENABLE();
 8003874:	4b80      	ldr	r3, [pc, #512]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	4a7f      	ldr	r2, [pc, #508]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800387a:	f043 0310 	orr.w	r3, r3, #16
 800387e:	6453      	str	r3, [r2, #68]	; 0x44
 8003880:	4b7d      	ldr	r3, [pc, #500]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	623b      	str	r3, [r7, #32]
 800388a:	6a3b      	ldr	r3, [r7, #32]
	    __HAL_RCC_USART1_FORCE_RESET();
 800388c:	4b7a      	ldr	r3, [pc, #488]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	4a79      	ldr	r2, [pc, #484]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003892:	f043 0310 	orr.w	r3, r3, #16
 8003896:	6253      	str	r3, [r2, #36]	; 0x24
	    __HAL_RCC_USART1_RELEASE_RESET();
 8003898:	4b77      	ldr	r3, [pc, #476]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	4a76      	ldr	r2, [pc, #472]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800389e:	f023 0310 	bic.w	r3, r3, #16
 80038a2:	6253      	str	r3, [r2, #36]	; 0x24
	    irq = USART1_IRQn;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2225      	movs	r2, #37	; 0x25
 80038a8:	76da      	strb	r2, [r3, #27]
	    handle.Instance = USART1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a73      	ldr	r2, [pc, #460]	; (8003a7c <_ZN8QAD_UART10periphInitEv+0x298>)
 80038ae:	61da      	str	r2, [r3, #28]
	  } break;
 80038b0:	e09a      	b.n	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
	  case (QAD_UART2): {
	    __HAL_RCC_USART2_CLK_ENABLE();
 80038b2:	4b71      	ldr	r3, [pc, #452]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a70      	ldr	r2, [pc, #448]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
	    __HAL_RCC_USART2_FORCE_RESET();
 80038ca:	4b6b      	ldr	r3, [pc, #428]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4a6a      	ldr	r2, [pc, #424]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	6213      	str	r3, [r2, #32]
	    __HAL_RCC_USART2_RELEASE_RESET();
 80038d6:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a67      	ldr	r2, [pc, #412]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038e0:	6213      	str	r3, [r2, #32]
	    irq = USART2_IRQn;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2226      	movs	r2, #38	; 0x26
 80038e6:	76da      	strb	r2, [r3, #27]
	    handle.Instance = USART2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <_ZN8QAD_UART10periphInitEv+0x29c>)
 80038ec:	61da      	str	r2, [r3, #28]
	  } break;
 80038ee:	e07b      	b.n	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
	  case (QAD_UART3): {
	    __HAL_RCC_USART3_CLK_ENABLE();
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fa:	6413      	str	r3, [r2, #64]	; 0x40
 80038fc:	4b5e      	ldr	r3, [pc, #376]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	69bb      	ldr	r3, [r7, #24]
	    __HAL_RCC_USART3_FORCE_RESET();
 8003908:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4a5a      	ldr	r2, [pc, #360]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800390e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003912:	6213      	str	r3, [r2, #32]
	    __HAL_RCC_USART3_RELEASE_RESET();
 8003914:	4b58      	ldr	r3, [pc, #352]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4a57      	ldr	r2, [pc, #348]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6213      	str	r3, [r2, #32]
	    irq = USART3_IRQn;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2227      	movs	r2, #39	; 0x27
 8003924:	76da      	strb	r2, [r3, #27]
	    handle.Instance = USART3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <_ZN8QAD_UART10periphInitEv+0x2a0>)
 800392a:	61da      	str	r2, [r3, #28]
	  } break;
 800392c:	e05c      	b.n	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
	  case (QAD_UART4): {
	    __HAL_RCC_UART4_CLK_ENABLE();
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a51      	ldr	r2, [pc, #324]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_UART4_FORCE_RESET();
 8003946:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800394c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003950:	6213      	str	r3, [r2, #32]
	    __HAL_RCC_UART4_RELEASE_RESET();
 8003952:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4a48      	ldr	r2, [pc, #288]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003958:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800395c:	6213      	str	r3, [r2, #32]
	    irq = UART4_IRQn;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2234      	movs	r2, #52	; 0x34
 8003962:	76da      	strb	r2, [r3, #27]
	    handle.Instance = UART4;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <_ZN8QAD_UART10periphInitEv+0x2a4>)
 8003968:	61da      	str	r2, [r3, #28]
	  } break;
 800396a:	e03d      	b.n	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
	  case (QAD_UART5): {
	    __HAL_RCC_UART5_CLK_ENABLE();
 800396c:	4b42      	ldr	r3, [pc, #264]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_UART5_FORCE_RESET();
 8003984:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	6213      	str	r3, [r2, #32]
	    __HAL_RCC_UART5_RELEASE_RESET();
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 8003996:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800399a:	6213      	str	r3, [r2, #32]
	    irq = UART5_IRQn;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2235      	movs	r2, #53	; 0x35
 80039a0:	76da      	strb	r2, [r3, #27]
	    handle.Instance = UART5;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZN8QAD_UART10periphInitEv+0x2a8>)
 80039a6:	61da      	str	r2, [r3, #28]
	  } break;
 80039a8:	e01e      	b.n	80039e8 <_ZN8QAD_UART10periphInitEv+0x204>
	  case (QAD_UART6): {
	    __HAL_RCC_USART6_CLK_ENABLE();
 80039aa:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a32      	ldr	r2, [pc, #200]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039b0:	f043 0320 	orr.w	r3, r3, #32
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_USART6_FORCE_RESET();
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039c8:	f043 0320 	orr.w	r3, r3, #32
 80039cc:	6253      	str	r3, [r2, #36]	; 0x24
	    __HAL_RCC_USART6_RELEASE_RESET();
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <_ZN8QAD_UART10periphInitEv+0x294>)
 80039d4:	f023 0320 	bic.w	r3, r3, #32
 80039d8:	6253      	str	r3, [r2, #36]	; 0x24
	    irq = USART6_IRQn;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2247      	movs	r2, #71	; 0x47
 80039de:	76da      	strb	r2, [r3, #27]
	    handle.Instance = USART6;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <_ZN8QAD_UART10periphInitEv+0x2ac>)
 80039e4:	61da      	str	r2, [r3, #28]
	  } break;
 80039e6:	bf00      	nop
	}

	  handle.Init.BaudRate = baud;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]
	  handle.Init.WordLength = UART_WORDLENGTH_8B;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
	  handle.Init.StopBits = UART_STOPBITS_1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
	  handle.Init.Parity = UART_PARITY_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
	  handle.Init.Mode = UART_MODE_TX_RX;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	220c      	movs	r2, #12
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
	  handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
	  handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
	  handle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c
	  if (HAL_UART_Init(&handle) != HAL_OK) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	331c      	adds	r3, #28
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f916 	bl	8002c50 <HAL_UART_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <_ZN8QAD_UART10periphInitEv+0x25c>
	    periphDeinit(DeinitPartial);
 8003a34:	2100      	movs	r1, #0
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f82c 	bl	8003a94 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
	    return QA_Fail;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e017      	b.n	8003a70 <_ZN8QAD_UART10periphInitEv+0x28c>
	  }

	  __HAL_UART_ENABLE(&handle);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

	  HAL_NVIC_SetPriority(irq, irq_priority, 0x00);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f993 001b 	ldrsb.w	r0, [r3, #27]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7a1b      	ldrb	r3, [r3, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd fdd0 	bl	8001602 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(irq);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd fde6 	bl	800163a <HAL_NVIC_EnableIRQ>

	  return QA_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3738      	adds	r7, #56	; 0x38
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40004c00 	.word	0x40004c00
 8003a8c:	40005000 	.word	0x40005000
 8003a90:	40011400 	.word	0x40011400

08003a94 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:

void QAD_UART::periphDeinit(QAD_UART::DeinitMode deinit_mode) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]

	if (deinit_mode == DeinitFull) {
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d118      	bne.n	8003ae8 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x54>
	  stop_tx();
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe34 	bl	8003724 <_ZN8QAD_UART7stop_txEv>
	  stop_rx();
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fe5d 	bl	800377c <_ZN8QAD_UART7stop_rxEv>
	  HAL_NVIC_DisableIRQ(irq);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fdc4 	bl	8001656 <HAL_NVIC_DisableIRQ>
	  __HAL_UART_DISABLE(&handle);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
	  HAL_UART_DeInit(&handle);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	331c      	adds	r3, #28
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f902 	bl	8002cec <HAL_UART_DeInit>
	}

	switch (uart) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d839      	bhi.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x64>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b11 	.word	0x08003b11
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b49 	.word	0x08003b49
 8003b0c:	08003b57 	.word	0x08003b57
	  case (QAD_UART1): {
	    __HAL_RCC_USART1_CLK_DISABLE();
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b16:	f023 0310 	bic.w	r3, r3, #16
 8003b1a:	6453      	str	r3, [r2, #68]	; 0x44
	  } break;
 8003b1c:	e022      	b.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
	  case (QAD_UART2): {
	    __HAL_RCC_USART2_CLK_DISABLE();
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
	  } break;
 8003b2a:	e01b      	b.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
	  case (QAD_UART3): {
	    __HAL_RCC_USART3_CLK_DISABLE();
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6413      	str	r3, [r2, #64]	; 0x40
	  } break;
 8003b38:	e014      	b.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
	  case (QAD_UART4): {
	    __HAL_RCC_UART4_CLK_DISABLE();
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b40:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
	  } break;
 8003b46:	e00d      	b.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
	  case (QAD_UART5): {
	    __HAL_RCC_UART5_CLK_DISABLE();
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b52:	6413      	str	r3, [r2, #64]	; 0x40
	  } break;
 8003b54:	e006      	b.n	8003b64 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0xd0>
	  case (QAD_UART6): {
	    __HAL_RCC_USART6_CLK_DISABLE();
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x110>)
 8003b5c:	f023 0320 	bic.w	r3, r3, #32
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
	  } break;
 8003b62:	bf00      	nop
	}

	GPIO_Init.Pin = rx_pin;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8b1b      	ldrh	r3, [r3, #24]
 8003b68:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode = GPIO_MODE_INPUT;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(rx_gpio, &GPIO_Init);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f107 020c 	add.w	r2, r7, #12
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fd83 	bl	800168c <HAL_GPIO_Init>

	GPIO_Init.Pin = tx_pin;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8a1b      	ldrh	r3, [r3, #16]
 8003b8a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(tx_gpio, &GPIO_Init);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f107 020c 	add.w	r2, r7, #12
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fd78 	bl	800168c <HAL_GPIO_Init>

}
 8003b9c:	bf00      	nop
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <_ZN19QAS_Serial_Dev_Base4initEPv>:

#include "QAS_Serial_Dev_Base.hpp"


  QA_Result QAS_Serial_Dev_Base::init(void *p)
  {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  	if (init_state) {
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7b9b      	ldrb	r3, [r3, #14]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  		return QA_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e013      	b.n	8003be6 <_ZN19QAS_Serial_Dev_Base4initEPv+0x3e>
  	}

  	if (imp_init(p)) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <_ZN19QAS_Serial_Dev_Base4initEPv+0x36>
      return QA_Fail;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e003      	b.n	8003be6 <_ZN19QAS_Serial_Dev_Base4initEPv+0x3e>
  	}

    init_state = QA_Initialised;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	739a      	strb	r2, [r3, #14]

    return QA_OK;
 8003be4:	2300      	movs	r3, #0
  }
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
  	return device_type;
  }

  // will be called by specific interrupt handler
  void QAS_Serial_Dev_Base::handler(void *p)
  {
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  	imp_handler(p);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
  }
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
  }

  // carriage return moves to start of line
  // line feed goes down a line from current cursor position
  // unix treats line feed as newline character, so a slight modification of original typewriter behaviour
  void QAS_Serial_Dev_Base::txStringCR(const char *str) {
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  	uint16_t len = strlen(str);
 8003c18:	6838      	ldr	r0, [r7, #0]
 8003c1a:	f7fc fb0d 	bl	8000238 <strlen>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i += 1) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	81fb      	strh	r3, [r7, #14]
 8003c26:	89fa      	ldrh	r2, [r7, #14]
 8003c28:	89bb      	ldrh	r3, [r7, #12]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d20f      	bcs.n	8003c4e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
      tx_fifo->push(str[i]);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f81f 	bl	8003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	f000 f9c2 	bl	8003fca <_ZN14QAT_FIFOBuffer4pushEh>
    for (uint16_t i = 0; i < len; i += 1) {
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	81fb      	strh	r3, [r7, #14]
 8003c4c:	e7eb      	b.n	8003c26 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
    }
    tx_fifo->push(13);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f80f 	bl	8003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	210d      	movs	r1, #13
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f9b4 	bl	8003fca <_ZN14QAT_FIFOBuffer4pushEh>

    imp_txStart();
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
  }
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	return get();
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f805 	bl	8003c8e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8003c84:	4603      	mov	r3, r0
      }
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f805 	bl	8003ca8 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f806 	bl	8003cc4 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f805 	bl	8003cde <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f805 	bl	8003cf6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f805 	bl	8003d10 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
 *      Author: ryan
 */

#include "QAS_Serial_Dev_UART.hpp"

QA_Result QAS_Serial_Dev_UART::imp_init(void *p) {
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  return uart->init();
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3314      	adds	r3, #20
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f8dd 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fc9c 	bl	800367a <_ZN8QAD_UART4initEv>
 8003d42:	4603      	mov	r3, r0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

void QAS_Serial_Dev_UART::imp_deinit(void) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uart->deinit();
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3314      	adds	r3, #20
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f8cb 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fca9 	bl	80036b8 <_ZN8QAD_UART6deinitEv>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:

void QAS_Serial_Dev_UART::imp_handler(void *p) {
 8003d6e:	b590      	push	{r4, r7, lr}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef *handle = &uart->getHandle();
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f8b9 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fcab 	bl	80036e0 <_ZN8QAD_UART9getHandleEv>
 8003d8a:	60f8      	str	r0, [r7, #12]

  if (__HAL_UART_GET_FLAG(handle, UART_FLAG_RXNE)) {
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01d      	beq.n	8003de0 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x72>
    uint8_t data = uart->data_rx();
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3314      	adds	r3, #20
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f8a3 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fd09 	bl	80037c8 <_ZN8QAD_UART7data_rxEv>
 8003db6:	4603      	mov	r3, r0
 8003db8:	72fb      	strb	r3, [r7, #11]
    if (rx_state) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7b5b      	ldrb	r3, [r3, #13]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x72>
    	rx_fifo->push(data);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff55 	bl	8003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f000 f8f9 	bl	8003fca <_ZN14QAT_FIFOBuffer4pushEh>
    	// clear this to ensure it doesn't continually call the interrupt handler again
    	__HAL_UART_CLEAR_FLAG(handle, UART_FLAG_RXNE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	621a      	str	r2, [r3, #32]
    }
  }

  if (__HAL_UART_GET_FLAG(handle, UART_FLAG_TXE)) {
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d035      	beq.n	8003e64 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xf6>
  	if (!tx_fifo->empty()) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff3a 	bl	8003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f8cd 	bl	8003fa4 <_ZN14QAT_FIFOBuffer5emptyEv>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d014      	beq.n	8003e44 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xd6>
      uart->data_tx(tx_fifo->pop());
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f868 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003e24:	4604      	mov	r4, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff23 	bl	8003c76 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f8ed 	bl	8004012 <_ZN14QAT_FIFOBuffer3popEv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7ff fcb3 	bl	80037a8 <_ZN8QAD_UART7data_txEh>
 8003e42:	e00b      	b.n	8003e5c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xee>
  	} else {
  		uart->stop_tx();
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3314      	adds	r3, #20
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f853 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fc67 	bl	8003724 <_ZN8QAD_UART7stop_txEv>
  		tx_state = PeriphInactive;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	731a      	strb	r2, [r3, #12]
  	}

  	__HAL_UART_CLEAR_FLAG(handle, UART_FLAG_TXE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	621a      	str	r2, [r3, #32]

  }
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uart->start_rx();
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3314      	adds	r3, #20
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f83b 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fc65 	bl	8003750 <_ZN8QAD_UART8start_rxEv>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	uart->stop_rx();
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f82a 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fc6a 	bl	800377c <_ZN8QAD_UART7stop_rxEv>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

void QAS_Serial_Dev_UART::imp_txStart(void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	uart->start_tx();
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f819 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fc17 	bl	80036f8 <_ZN8QAD_UART8start_txEv>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

void QAS_Serial_Dev_UART::imp_txStop(void) {
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	uart->stop_tx();
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3314      	adds	r3, #20
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f808 	bl	8003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fc1c 	bl	8003724 <_ZN8QAD_UART7stop_txEv>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	return get();
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f805 	bl	8003f0c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8003f02:	4603      	mov	r3, r0
      }
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f805 	bl	8003f26 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f806 	bl	8003f42 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8003f36:	4603      	mov	r3, r0
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f805 	bl	8003f5c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f805 	bl	8003f74 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f805 	bl	8003f8e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_ZN14QAT_FIFOBuffer5emptyEv>:

  void QAT_FIFOBuffer::clear(void) {
    read_index = write_index = 0;
  }

  QAT_FIFOBuffer::FIFOState QAT_FIFOBuffer::empty(void) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  	return (read_index == write_index) ? FSEmpty : FS_NotEmpty;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	88da      	ldrh	r2, [r3, #6]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	891b      	ldrh	r3, [r3, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d101      	bne.n	8003fbc <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8003fbc:	2300      	movs	r3, #0
  }
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_ZN14QAT_FIFOBuffer4pushEh>:
    } else {
      return cached_write_index + (size - read_index);
    }
  }

  void QAT_FIFOBuffer::push(uint8_t data) {
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
    buffer[write_index] = data;
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	891b      	ldrh	r3, [r3, #8]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 f847 	bl	8004072 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	7013      	strb	r3, [r2, #0]
    if (write_index <= (size - 1)) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	889a      	ldrh	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	891b      	ldrh	r3, [r3, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d906      	bls.n	8004004 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
    	write_index += 1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	891b      	ldrh	r3, [r3, #8]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	811a      	strh	r2, [r3, #8]
    } else {
    	write_index = 0;
    }
  }
 8004002:	e002      	b.n	800400a <_ZN14QAT_FIFOBuffer4pushEh+0x40>
    	write_index = 0;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	811a      	strh	r2, [r3, #8]
  }
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <_ZN14QAT_FIFOBuffer3popEv>:

  uint8_t QAT_FIFOBuffer::pop(void) {
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
    if (!empty()) {
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ffc2 	bl	8003fa4 <_ZN14QAT_FIFOBuffer5emptyEv>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <_ZN14QAT_FIFOBuffer3popEv+0x56>
      uint8_t data = buffer[read_index];
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	88db      	ldrh	r3, [r3, #6]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 f81a 	bl	8004072 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800403e:	4603      	mov	r3, r0
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	73fb      	strb	r3, [r7, #15]
      if (read_index <= (size - 1)) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	889a      	ldrh	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	88db      	ldrh	r3, [r3, #6]
 800404c:	429a      	cmp	r2, r3
 800404e:	d906      	bls.n	800405e <_ZN14QAT_FIFOBuffer3popEv+0x4c>
      	read_index += 1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	88db      	ldrh	r3, [r3, #6]
 8004054:	3301      	adds	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	80da      	strh	r2, [r3, #6]
 800405c:	e002      	b.n	8004064 <_ZN14QAT_FIFOBuffer3popEv+0x52>
      } else {
      	read_index = 0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	80da      	strh	r2, [r3, #6]
      }
      return data;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	e000      	b.n	800406a <_ZN14QAT_FIFOBuffer3popEv+0x58>
    }
    return 0;
 8004068:	2300      	movs	r3, #0
  }
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
	return get()[__i];
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f807 	bl	8004090 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8004082:	4602      	mov	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4413      	add	r3, r2
      }
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f805 	bl	80040aa <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f806 	bl	80040c6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80040ba:	4603      	mov	r3, r0
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f805 	bl	80040e0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f805 	bl	80040f8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f805 	bl	8004112 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8004108:	4603      	mov	r3, r0
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_Znwj>:
 8004128:	2801      	cmp	r0, #1
 800412a:	bf38      	it	cc
 800412c:	2001      	movcc	r0, #1
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	4620      	mov	r0, r4
 8004134:	f000 f85a 	bl	80041ec <malloc>
 8004138:	b930      	cbnz	r0, 8004148 <_Znwj+0x20>
 800413a:	f000 f81d 	bl	8004178 <_ZSt15get_new_handlerv>
 800413e:	b908      	cbnz	r0, 8004144 <_Znwj+0x1c>
 8004140:	f000 f822 	bl	8004188 <abort>
 8004144:	4780      	blx	r0
 8004146:	e7f4      	b.n	8004132 <_Znwj+0xa>
 8004148:	bd10      	pop	{r4, pc}

0800414a <_Znaj>:
 800414a:	f7ff bfed 	b.w	8004128 <_Znwj>

0800414e <__cxa_pure_virtual>:
 800414e:	b508      	push	{r3, lr}
 8004150:	f000 f80c 	bl	800416c <_ZSt9terminatev>

08004154 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004154:	b508      	push	{r3, lr}
 8004156:	4780      	blx	r0
 8004158:	f000 f816 	bl	8004188 <abort>

0800415c <_ZSt13get_terminatev>:
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <_ZSt13get_terminatev+0xc>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	f3bf 8f5b 	dmb	ish
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	2000000c 	.word	0x2000000c

0800416c <_ZSt9terminatev>:
 800416c:	b508      	push	{r3, lr}
 800416e:	f7ff fff5 	bl	800415c <_ZSt13get_terminatev>
 8004172:	f7ff ffef 	bl	8004154 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004178 <_ZSt15get_new_handlerv>:
 8004178:	4b02      	ldr	r3, [pc, #8]	; (8004184 <_ZSt15get_new_handlerv+0xc>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f3bf 8f5b 	dmb	ish
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2000009c 	.word	0x2000009c

08004188 <abort>:
 8004188:	b508      	push	{r3, lr}
 800418a:	2006      	movs	r0, #6
 800418c:	f000 f90a 	bl	80043a4 <raise>
 8004190:	2001      	movs	r0, #1
 8004192:	f7fd f895 	bl	80012c0 <_exit>
	...

08004198 <__errno>:
 8004198:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <__errno+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000010 	.word	0x20000010

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	; (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	; (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	; (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 f91e 	bl	80043f8 <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004488 	.word	0x08004488
 80041e0:	08004488 	.word	0x08004488
 80041e4:	08004488 	.word	0x08004488
 80041e8:	0800448c 	.word	0x0800448c

080041ec <malloc>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <malloc+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f000 b82b 	b.w	800424c <_malloc_r>
 80041f6:	bf00      	nop
 80041f8:	20000010 	.word	0x20000010

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <sbrk_aligned>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4e0e      	ldr	r6, [pc, #56]	; (8004248 <sbrk_aligned+0x3c>)
 8004210:	460c      	mov	r4, r1
 8004212:	6831      	ldr	r1, [r6, #0]
 8004214:	4605      	mov	r5, r0
 8004216:	b911      	cbnz	r1, 800421e <sbrk_aligned+0x12>
 8004218:	f000 f88c 	bl	8004334 <_sbrk_r>
 800421c:	6030      	str	r0, [r6, #0]
 800421e:	4621      	mov	r1, r4
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f887 	bl	8004334 <_sbrk_r>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d00a      	beq.n	8004240 <sbrk_aligned+0x34>
 800422a:	1cc4      	adds	r4, r0, #3
 800422c:	f024 0403 	bic.w	r4, r4, #3
 8004230:	42a0      	cmp	r0, r4
 8004232:	d007      	beq.n	8004244 <sbrk_aligned+0x38>
 8004234:	1a21      	subs	r1, r4, r0
 8004236:	4628      	mov	r0, r5
 8004238:	f000 f87c 	bl	8004334 <_sbrk_r>
 800423c:	3001      	adds	r0, #1
 800423e:	d101      	bne.n	8004244 <sbrk_aligned+0x38>
 8004240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004244:	4620      	mov	r0, r4
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	200000a4 	.word	0x200000a4

0800424c <_malloc_r>:
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004250:	1ccd      	adds	r5, r1, #3
 8004252:	f025 0503 	bic.w	r5, r5, #3
 8004256:	3508      	adds	r5, #8
 8004258:	2d0c      	cmp	r5, #12
 800425a:	bf38      	it	cc
 800425c:	250c      	movcc	r5, #12
 800425e:	2d00      	cmp	r5, #0
 8004260:	4607      	mov	r7, r0
 8004262:	db01      	blt.n	8004268 <_malloc_r+0x1c>
 8004264:	42a9      	cmp	r1, r5
 8004266:	d905      	bls.n	8004274 <_malloc_r+0x28>
 8004268:	230c      	movs	r3, #12
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	2600      	movs	r6, #0
 800426e:	4630      	mov	r0, r6
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	4e2e      	ldr	r6, [pc, #184]	; (8004330 <_malloc_r+0xe4>)
 8004276:	f000 f8b1 	bl	80043dc <__malloc_lock>
 800427a:	6833      	ldr	r3, [r6, #0]
 800427c:	461c      	mov	r4, r3
 800427e:	bb34      	cbnz	r4, 80042ce <_malloc_r+0x82>
 8004280:	4629      	mov	r1, r5
 8004282:	4638      	mov	r0, r7
 8004284:	f7ff ffc2 	bl	800420c <sbrk_aligned>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	4604      	mov	r4, r0
 800428c:	d14d      	bne.n	800432a <_malloc_r+0xde>
 800428e:	6834      	ldr	r4, [r6, #0]
 8004290:	4626      	mov	r6, r4
 8004292:	2e00      	cmp	r6, #0
 8004294:	d140      	bne.n	8004318 <_malloc_r+0xcc>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	4631      	mov	r1, r6
 800429a:	4638      	mov	r0, r7
 800429c:	eb04 0803 	add.w	r8, r4, r3
 80042a0:	f000 f848 	bl	8004334 <_sbrk_r>
 80042a4:	4580      	cmp	r8, r0
 80042a6:	d13a      	bne.n	800431e <_malloc_r+0xd2>
 80042a8:	6821      	ldr	r1, [r4, #0]
 80042aa:	3503      	adds	r5, #3
 80042ac:	1a6d      	subs	r5, r5, r1
 80042ae:	f025 0503 	bic.w	r5, r5, #3
 80042b2:	3508      	adds	r5, #8
 80042b4:	2d0c      	cmp	r5, #12
 80042b6:	bf38      	it	cc
 80042b8:	250c      	movcc	r5, #12
 80042ba:	4629      	mov	r1, r5
 80042bc:	4638      	mov	r0, r7
 80042be:	f7ff ffa5 	bl	800420c <sbrk_aligned>
 80042c2:	3001      	adds	r0, #1
 80042c4:	d02b      	beq.n	800431e <_malloc_r+0xd2>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	442b      	add	r3, r5
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	e00e      	b.n	80042ec <_malloc_r+0xa0>
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	1b52      	subs	r2, r2, r5
 80042d2:	d41e      	bmi.n	8004312 <_malloc_r+0xc6>
 80042d4:	2a0b      	cmp	r2, #11
 80042d6:	d916      	bls.n	8004306 <_malloc_r+0xba>
 80042d8:	1961      	adds	r1, r4, r5
 80042da:	42a3      	cmp	r3, r4
 80042dc:	6025      	str	r5, [r4, #0]
 80042de:	bf18      	it	ne
 80042e0:	6059      	strne	r1, [r3, #4]
 80042e2:	6863      	ldr	r3, [r4, #4]
 80042e4:	bf08      	it	eq
 80042e6:	6031      	streq	r1, [r6, #0]
 80042e8:	5162      	str	r2, [r4, r5]
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	4638      	mov	r0, r7
 80042ee:	f104 060b 	add.w	r6, r4, #11
 80042f2:	f000 f879 	bl	80043e8 <__malloc_unlock>
 80042f6:	f026 0607 	bic.w	r6, r6, #7
 80042fa:	1d23      	adds	r3, r4, #4
 80042fc:	1af2      	subs	r2, r6, r3
 80042fe:	d0b6      	beq.n	800426e <_malloc_r+0x22>
 8004300:	1b9b      	subs	r3, r3, r6
 8004302:	50a3      	str	r3, [r4, r2]
 8004304:	e7b3      	b.n	800426e <_malloc_r+0x22>
 8004306:	6862      	ldr	r2, [r4, #4]
 8004308:	42a3      	cmp	r3, r4
 800430a:	bf0c      	ite	eq
 800430c:	6032      	streq	r2, [r6, #0]
 800430e:	605a      	strne	r2, [r3, #4]
 8004310:	e7ec      	b.n	80042ec <_malloc_r+0xa0>
 8004312:	4623      	mov	r3, r4
 8004314:	6864      	ldr	r4, [r4, #4]
 8004316:	e7b2      	b.n	800427e <_malloc_r+0x32>
 8004318:	4634      	mov	r4, r6
 800431a:	6876      	ldr	r6, [r6, #4]
 800431c:	e7b9      	b.n	8004292 <_malloc_r+0x46>
 800431e:	230c      	movs	r3, #12
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4638      	mov	r0, r7
 8004324:	f000 f860 	bl	80043e8 <__malloc_unlock>
 8004328:	e7a1      	b.n	800426e <_malloc_r+0x22>
 800432a:	6025      	str	r5, [r4, #0]
 800432c:	e7de      	b.n	80042ec <_malloc_r+0xa0>
 800432e:	bf00      	nop
 8004330:	200000a0 	.word	0x200000a0

08004334 <_sbrk_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d06      	ldr	r5, [pc, #24]	; (8004350 <_sbrk_r+0x1c>)
 8004338:	2300      	movs	r3, #0
 800433a:	4604      	mov	r4, r0
 800433c:	4608      	mov	r0, r1
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc ffc8 	bl	80012d4 <_sbrk>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d102      	bne.n	800434e <_sbrk_r+0x1a>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	b103      	cbz	r3, 800434e <_sbrk_r+0x1a>
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	200000a8 	.word	0x200000a8

08004354 <_raise_r>:
 8004354:	291f      	cmp	r1, #31
 8004356:	b538      	push	{r3, r4, r5, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	460d      	mov	r5, r1
 800435c:	d904      	bls.n	8004368 <_raise_r+0x14>
 800435e:	2316      	movs	r3, #22
 8004360:	6003      	str	r3, [r0, #0]
 8004362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800436a:	b112      	cbz	r2, 8004372 <_raise_r+0x1e>
 800436c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004370:	b94b      	cbnz	r3, 8004386 <_raise_r+0x32>
 8004372:	4620      	mov	r0, r4
 8004374:	f000 f830 	bl	80043d8 <_getpid_r>
 8004378:	462a      	mov	r2, r5
 800437a:	4601      	mov	r1, r0
 800437c:	4620      	mov	r0, r4
 800437e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004382:	f000 b817 	b.w	80043b4 <_kill_r>
 8004386:	2b01      	cmp	r3, #1
 8004388:	d00a      	beq.n	80043a0 <_raise_r+0x4c>
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	d103      	bne.n	8004396 <_raise_r+0x42>
 800438e:	2316      	movs	r3, #22
 8004390:	6003      	str	r3, [r0, #0]
 8004392:	2001      	movs	r0, #1
 8004394:	e7e7      	b.n	8004366 <_raise_r+0x12>
 8004396:	2400      	movs	r4, #0
 8004398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800439c:	4628      	mov	r0, r5
 800439e:	4798      	blx	r3
 80043a0:	2000      	movs	r0, #0
 80043a2:	e7e0      	b.n	8004366 <_raise_r+0x12>

080043a4 <raise>:
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <raise+0xc>)
 80043a6:	4601      	mov	r1, r0
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f7ff bfd3 	b.w	8004354 <_raise_r>
 80043ae:	bf00      	nop
 80043b0:	20000010 	.word	0x20000010

080043b4 <_kill_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4d07      	ldr	r5, [pc, #28]	; (80043d4 <_kill_r+0x20>)
 80043b8:	2300      	movs	r3, #0
 80043ba:	4604      	mov	r4, r0
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	f7fc ff6d 	bl	80012a0 <_kill>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d102      	bne.n	80043d0 <_kill_r+0x1c>
 80043ca:	682b      	ldr	r3, [r5, #0]
 80043cc:	b103      	cbz	r3, 80043d0 <_kill_r+0x1c>
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	bd38      	pop	{r3, r4, r5, pc}
 80043d2:	bf00      	nop
 80043d4:	200000a8 	.word	0x200000a8

080043d8 <_getpid_r>:
 80043d8:	f7fc bf5a 	b.w	8001290 <_getpid>

080043dc <__malloc_lock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__malloc_lock+0x8>)
 80043de:	f000 b809 	b.w	80043f4 <__retarget_lock_acquire_recursive>
 80043e2:	bf00      	nop
 80043e4:	200000ac 	.word	0x200000ac

080043e8 <__malloc_unlock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	; (80043f0 <__malloc_unlock+0x8>)
 80043ea:	f000 b804 	b.w	80043f6 <__retarget_lock_release_recursive>
 80043ee:	bf00      	nop
 80043f0:	200000ac 	.word	0x200000ac

080043f4 <__retarget_lock_acquire_recursive>:
 80043f4:	4770      	bx	lr

080043f6 <__retarget_lock_release_recursive>:
 80043f6:	4770      	bx	lr

080043f8 <_init>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	bf00      	nop
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr

08004404 <_fini>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	bf00      	nop
 8004408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440a:	bc08      	pop	{r3}
 800440c:	469e      	mov	lr, r3
 800440e:	4770      	bx	lr
