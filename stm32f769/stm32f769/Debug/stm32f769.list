
stm32f769.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002794  08002794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800279c  0800279c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  08002814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002814  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000952c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000716d  00000000  00000000  000295ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b42  00000000  00000000  00030737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133b6b  00000000  00000000  00032910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000005a8  00000000  00000000  00166480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033836  00000000  00000000  00166a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b40  00000000  00000000  0019a2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	0800276c 	.word	0x0800276c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	0800276c 	.word	0x0800276c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000558:	4c0b      	ldr	r4, [pc, #44]	; (8000588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000566:	f000 fb5d 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f001 ffd5 	bl	8002518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800056e:	f000 fa8f 	bl	8000a90 <main>
  bx  lr    
 8000572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000574:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000580:	080027a4 	.word	0x080027a4
  ldr r2, =_sbss
 8000584:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000588:	200000a8 	.word	0x200000a8

0800058c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>
	...

08000590 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
}
 8000598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059a:	f3bf 8f6f 	isb	sy
}
 800059e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <SCB_EnableICache+0x48>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005a8:	f3bf 8f4f 	dsb	sy
}
 80005ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
}
 80005b2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SCB_EnableICache+0x48>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SCB_EnableICache+0x48>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SCB_EnableDCache+0x9c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SCB_EnableDCache+0x9c>)
 80005f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005f6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0b5b      	lsrs	r3, r3, #13
 80005fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000600:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	015a      	lsls	r2, r3, #5
 8000610:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000614:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061a:	4917      	ldr	r1, [pc, #92]	; (8000678 <SCB_EnableDCache+0x9c>)
 800061c:	4313      	orrs	r3, r2
 800061e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	60ba      	str	r2, [r7, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d000      	beq.n	8000638 <SCB_EnableDCache+0x5c>
      do {
 8000636:	e7e9      	b.n	800060c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	60fa      	str	r2, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf14      	ite	ne
 8000642:	2301      	movne	r3, #1
 8000644:	2300      	moveq	r3, #0
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d000      	beq.n	800064e <SCB_EnableDCache+0x72>
    do {
 800064c:	e7d9      	b.n	8000602 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x9c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x9c>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <_Z16SystemInitializev>:
#include "boot.hpp"

// System Initialize Function
QA_Result
SystemInitialize(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0c6      	sub	sp, #280	; 0x118
 8000680:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8000682:	f7ff ff85 	bl	8000590 <SCB_EnableICache>
  SCB_EnableDCache();
 8000686:	f7ff ffa9 	bl	80005dc <SCB_EnableDCache>

  // adaptive real time accelerator
  // quicker access to in-build flash
  __HAL_FLASH_ART_ENABLE();
 800068a:	4b69      	ldr	r3, [pc, #420]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a68      	ldr	r2, [pc, #416]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 8000690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000694:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000696:	4b66      	ldr	r3, [pc, #408]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a65      	ldr	r2, [pc, #404]	; (8000830 <_Z16SystemInitializev+0x1b4>)
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	6013      	str	r3, [r2, #0]

  // so instead of major.minor interrupt priorities,
  // only have single number between 0-15
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 fbd2 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  // set systick to a high priority
  // systick is a timer built into ARM, so is consistent unlike peripheral timers
  // also only counts up and no capture modes
  // IMPORTANT: If setting systick to say 1ms, NVIC might dump some interrupts as too many
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 facd 	bl	8000c48 <HAL_InitTick>
  // The processor has some sort of 'backup' domain circuitry,
  // i.e. memory and registers that are preserved on reset, code flashing
  // we want to have LSE as part of this 'backup' domain also
  // so it can power RTC?
  // to modify the 'backup' domain, must get access to it
  HAL_PWR_EnableBkUpAccess();
 80006ae:	f000 fdc7 	bl	8001240 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006b6:	4a5f      	ldr	r2, [pc, #380]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006b8:	f023 0318 	bic.w	r3, r3, #24
 80006bc:	6713      	str	r3, [r2, #112]	; 0x70

  // enable power management clock
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  // internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b58      	ldr	r3, [pc, #352]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a57      	ldr	r2, [pc, #348]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <_Z16SystemInitializev+0x1bc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80006ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  // 1. enable oscillators and PLL so frequency output for system is what we want
  // 2. making sure bus clock and bus clock dividers are correct
  // 3. setup some peripheral clocks (most are driver specific)
  // 4. setup GPIO clocks and DMA clocks

  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ff3a 	bl	8002570 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 80006fc:	2305      	movs	r3, #5
 80006fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInit.HSEState = RCC_HSE_ON;
 8000702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState = RCC_LSE_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInit.PLL.PLLM = 25;
 800071e:	2319      	movs	r3, #25
 8000720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN = 432;
 8000724:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK)
 8000738:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fddf 	bl	8001300 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <_Z16SystemInitializev+0xda>
  {
    return QA_Fail;
 8000752:	2301      	movs	r3, #1
 8000754:	e147      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // syscfg collection of registers not fitting elsewhere
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a36      	ldr	r2, [pc, #216]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <_Z16SystemInitializev+0x1b8>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  // overdrive mode ensures running smoothly at max. clock value
  // i.e. allow core to run at higher frequency than default
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076e:	f000 fd77 	bl	8001260 <HAL_PWREx_EnableOverDrive>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <_Z16SystemInitializev+0x10a>
  {
  	return QA_Fail;
 8000782:	2301      	movs	r3, #1
 8000784:	e12f      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // enable cpu and bus clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000786:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000796:	230f      	movs	r3, #15
 8000798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK)
 80007b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007bc:	2107      	movs	r1, #7
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f84c 	bl	800185c <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_Z16SystemInitializev+0x15c>
  {
    return QA_Fail;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e106      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
  }

  // setup peripheral clocks
  // RTC is considered a peripheral?
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007dc:	2290      	movs	r2, #144	; 0x90
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fec5 	bl	8002570 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_USART1;
 80007e6:	2368      	movs	r3, #104	; 0x68
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40

  // LTDC uses SAI PLL
  RCC_PeriphClkInit.PLLSAI.PLLSAIN = 384;
 80007ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_PeriphClkInit.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007f0:	2303      	movs	r3, #3
 80007f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_PeriphClkInit.PLLSAI.PLLSAIR = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_PeriphClkInit.PLLSAI.PLLSAIQ = 8;
 80007f8:	2308      	movs	r3, #8
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_PeriphClkInit.PLLSAIDivQ = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_PeriphClkInit.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000800:	2300      	movs	r3, #0
 8000802:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8000810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f9d3 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d008      	beq.n	800083c <_Z16SystemInitializev+0x1c0>
  {
    return QA_Fail;
 800082a:	2301      	movs	r3, #1
 800082c:	e0db      	b.n	80009e6 <_Z16SystemInitializev+0x36a>
 800082e:	bf00      	nop
 8000830:	40023c00 	.word	0x40023c00
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000
  }

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a6b      	ldr	r2, [pc, #428]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
 8000848:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a65      	ldr	r2, [pc, #404]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b63      	ldr	r3, [pc, #396]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a5f      	ldr	r2, [pc, #380]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
 8000882:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089c:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4a53      	ldr	r2, [pc, #332]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6313      	str	r3, [r2, #48]	; 0x30
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b4:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a4d      	ldr	r2, [pc, #308]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008cc:	4b48      	ldr	r3, [pc, #288]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a47      	ldr	r2, [pc, #284]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008f2:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a3d      	ldr	r2, [pc, #244]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80008fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8000908:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800090c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800093e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000942:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800095c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800096a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800098e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000992:	681b      	ldr	r3, [r3, #0]

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <_Z16SystemInitializev+0x374>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <_Z16SystemInitializev+0x374>)
 800099a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80009a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009ba:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <_Z16SystemInitializev+0x374>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80009d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80009e2:	681b      	ldr	r3, [r3, #0]


  return QA_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
#include "handlers.hpp"

void
NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:

void
HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
	while(1) {}
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:
}

void
MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	while (1) {}
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:
}

void
BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
	while(1) {}
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:
}

void
UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	while(1) {}
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:
}

void
SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

void
DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

void
PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

void
SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a48:	f000 f92e 	bl	8000ca8 <HAL_IncTick>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
	enum PinState : uint8_t {PinOff = 0, PinOn};

  GPIO_TypeDef *gpio;
  uint16_t pin;
  QAD_GPIO_Input() = delete;
  QAD_GPIO_Input(GPIO_TypeDef *gpio, uint16_t pin) :
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	80fb      	strh	r3, [r7, #6]
  	gpio(gpio), pin(pin) {
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	88fa      	ldrh	r2, [r7, #6]
 8000a68:	809a      	strh	r2, [r3, #4]

    GPIO_InitTypeDef GPIO_Init;
    GPIO_Init.Pin = pin;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(gpio, &GPIO_Init);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	68b8      	ldr	r0, [r7, #8]
 8000a82:	f000 fa17 	bl	8000eb4 <HAL_GPIO_Init>
  }
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <main>:

#include "QAD_GPIO.hpp"

int
main(void)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
	uint32_t ticks = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t old_tick = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
	uint32_t new_tick = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
	uint32_t cur_tick = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

	uint32_t heartbeat_ticks = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
	const uint32_t heartbeat_tick_threshold = 500;
 8000aaa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aae:	613b      	str	r3, [r7, #16]

  // System setup
  if (SystemInitialize())
 8000ab0:	f7ff fde4 	bl	800067c <_Z16SystemInitializev>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d000      	beq.n	8000ac6 <main+0x36>
  {
    while (1) {}
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x34>
  }

  // User LEDs
  QAD_GPIO_Output *gpio_user_led_red = new QAD_GPIO_Output(QA_USERLED_RED_GPIO_PORT, QA_USERLED_RED_GPIO_PIN);
 8000ac6:	2008      	movs	r0, #8
 8000ac8:	f001 fcfe 	bl	80024c8 <_Znwj>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461c      	mov	r4, r3
 8000ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad4:	4925      	ldr	r1, [pc, #148]	; (8000b6c <main+0xdc>)
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f001 fc9a 	bl	8002410 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000adc:	60fc      	str	r4, [r7, #12]
  QAD_GPIO_Output *gpio_user_led_green = new QAD_GPIO_Output(QA_USERLED_GREEN_GPIO_PORT, QA_USERLED_GREEN_GPIO_PIN);
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f001 fcf2 	bl	80024c8 <_Znwj>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461c      	mov	r4, r3
 8000ae8:	2220      	movs	r2, #32
 8000aea:	4920      	ldr	r1, [pc, #128]	; (8000b6c <main+0xdc>)
 8000aec:	4620      	mov	r0, r4
 8000aee:	f001 fc8f 	bl	8002410 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000af2:	60bc      	str	r4, [r7, #8]

  QAD_GPIO_Input *gpio_user_button = new QAD_GPIO_Input(QA_USERBUTTON_GPIO_PORT, QA_USERBUTTON_GPIO_PIN);
 8000af4:	2008      	movs	r0, #8
 8000af6:	f001 fce7 	bl	80024c8 <_Znwj>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461c      	mov	r4, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	491b      	ldr	r1, [pc, #108]	; (8000b70 <main+0xe0>)
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff ffa4 	bl	8000a50 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 8000b08:	607c      	str	r4, [r7, #4]

  // Processing loop
	new_tick = HAL_GetTick();
 8000b0a:	f000 f8e1 	bl	8000cd0 <HAL_GetTick>
 8000b0e:	6238      	str	r0, [r7, #32]
	old_tick = new_tick;
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	61bb      	str	r3, [r7, #24]

  while (1) {
  	cur_tick = HAL_GetTick();
 8000b14:	f000 f8dc 	bl	8000cd0 <HAL_GetTick>
 8000b18:	6178      	str	r0, [r7, #20]
  	// check more than 1ms elapsed since previous loop iteration
  	if (cur_tick != new_tick) {
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d012      	beq.n	8000b48 <main+0xb8>
  	  old_tick = new_tick;
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	61bb      	str	r3, [r7, #24]
  	  new_tick = cur_tick;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	623b      	str	r3, [r7, #32]

  	  // as cumulative ticks, if running longer than 52days, 32bit overflow will occur
  	  if (new_tick < old_tick) {
 8000b2a:	6a3a      	ldr	r2, [r7, #32]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d205      	bcs.n	8000b3e <main+0xae>
  	    ticks = new_tick + (0xffffffff - old_tick);
 8000b32:	6a3a      	ldr	r2, [r7, #32]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3c:	e006      	b.n	8000b4c <main+0xbc>
  	  } else {
  	    ticks = new_tick - old_tick;
 8000b3e:	6a3a      	ldr	r2, [r7, #32]
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
 8000b46:	e001      	b.n	8000b4c <main+0xbc>
  	  }
  	} else {
  	  // ticks holds the amount of ms since last loop
  	  ticks = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  	}



  	// update heartbeat led
  	heartbeat_ticks += ticks;
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	4413      	add	r3, r2
 8000b52:	61fb      	str	r3, [r7, #28]
  	if (heartbeat_ticks >= heartbeat_tick_threshold) {
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b5a:	d3db      	bcc.n	8000b14 <main+0x84>
      gpio_user_led_green->toggle();
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f001 fca0 	bl	80024a2 <_ZN15QAD_GPIO_Output6toggleEv>
      heartbeat_ticks -= heartbeat_tick_threshold;
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000b68:	61fb      	str	r3, [r7, #28]
  	cur_tick = HAL_GetTick();
 8000b6a:	e7d3      	b.n	8000b14 <main+0x84>
 8000b6c:	40022400 	.word	0x40022400
 8000b70:	40020000 	.word	0x40020000

08000b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return 1;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_kill>:

int _kill(int pid, int sig)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b8e:	f001 fcbd 	bl	800250c <__errno>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2216      	movs	r2, #22
 8000b96:	601a      	str	r2, [r3, #0]
  return -1;
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_exit>:

void _exit (int status)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ffe7 	bl	8000b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bb6:	e7fe      	b.n	8000bb6 <_exit+0x12>

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f001 fc90 	bl	800250c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20080000 	.word	0x20080000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	200000a8 	.word	0x200000a8

08000c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f917 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f000 f8ed 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000090 	.word	0x20000090

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <__NVIC_SetPriorityGrouping>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	05fa0000 	.word	0x05fa0000

08000d30 <__NVIC_GetPriorityGrouping>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_SetPriority>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e175      	b.n	80011c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8164 	bne.w	80011ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_GPIO_Init+0x56>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	69b9      	ldr	r1, [r7, #24]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80be 	beq.w	80011ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_GPIO_Init+0x324>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a65      	ldr	r2, [pc, #404]	; (80011d8 <HAL_GPIO_Init+0x324>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <HAL_GPIO_Init+0x324>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001056:	4a61      	ldr	r2, [pc, #388]	; (80011dc <HAL_GPIO_Init+0x328>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a58      	ldr	r2, [pc, #352]	; (80011e0 <HAL_GPIO_Init+0x32c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d037      	beq.n	80010f2 <HAL_GPIO_Init+0x23e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_GPIO_Init+0x330>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d031      	beq.n	80010ee <HAL_GPIO_Init+0x23a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a56      	ldr	r2, [pc, #344]	; (80011e8 <HAL_GPIO_Init+0x334>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x236>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a55      	ldr	r2, [pc, #340]	; (80011ec <HAL_GPIO_Init+0x338>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x232>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a54      	ldr	r2, [pc, #336]	; (80011f0 <HAL_GPIO_Init+0x33c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x22e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <HAL_GPIO_Init+0x340>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x22a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x344>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x348>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x34c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x350>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x21a>
 80010ca:	2309      	movs	r3, #9
 80010cc:	e012      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ce:	230a      	movs	r3, #10
 80010d0:	e010      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010d2:	2308      	movs	r3, #8
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	; (80011dc <HAL_GPIO_Init+0x328>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_GPIO_Init+0x354>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a34      	ldr	r2, [pc, #208]	; (8001208 <HAL_GPIO_Init+0x354>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x354>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_GPIO_Init+0x354>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_GPIO_Init+0x354>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_GPIO_Init+0x354>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x354>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_GPIO_Init+0x354>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae86 	bls.w	8000ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40022000 	.word	0x40022000
 8001204:	40022400 	.word	0x40022400
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40007000 	.word	0x40007000

08001260 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800128e:	f7ff fd1f 	bl	8000cd0 <HAL_GetTick>
 8001292:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001294:	e009      	b.n	80012aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001296:	f7ff fd1b 	bl	8000cd0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d901      	bls.n	80012aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e022      	b.n	80012f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d1ee      	bne.n	8001296 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80012be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c4:	f7ff fd04 	bl	8000cd0 <HAL_GetTick>
 80012c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ca:	e009      	b.n	80012e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012cc:	f7ff fd00 	bl	8000cd0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012da:	d901      	bls.n	80012e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e007      	b.n	80012f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012ec:	d1ee      	bne.n	80012cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e29b      	b.n	800184e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001324:	4b96      	ldr	r3, [pc, #600]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001330:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d112      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
 800133c:	4b90      	ldr	r3, [pc, #576]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001348:	d10b      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134a:	4b8d      	ldr	r3, [pc, #564]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d06c      	beq.n	8001430 <HAL_RCC_OscConfig+0x130>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d168      	bne.n	8001430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e275      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x7a>
 800136c:	4b84      	ldr	r3, [pc, #528]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a83      	ldr	r2, [pc, #524]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e02e      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x9c>
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7e      	ldr	r2, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7b      	ldr	r2, [pc, #492]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a75      	ldr	r2, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b73      	ldr	r3, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a72      	ldr	r2, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6b      	ldr	r2, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc76 	bl	8000cd0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc72 	bl	8000cd0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e229      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b61      	ldr	r3, [pc, #388]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc62 	bl	8000cd0 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc5e 	bl	8000cd0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e215      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x110>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d069      	beq.n	8001512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143e:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x190>
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x17a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1e9      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	493d      	ldr	r1, [pc, #244]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e040      	b.n	8001512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc14 	bl	8000cd0 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc10 	bl	8000cd0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1c7      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4929      	ldr	r1, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbf0 	bl	8000cd0 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbec 	bl	8000cd0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1a3      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d038      	beq.n	8001590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d019      	beq.n	800155a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fbcd 	bl	8000cd0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fbc9 	bl	8000cd0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e180      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800154e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x23a>
 8001558:	e01a      	b.n	8001590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_RCC_OscConfig+0x280>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff fbb3 	bl	8000cd0 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fbaf 	bl	8000cd0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d903      	bls.n	8001584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e166      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
 8001580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b92      	ldr	r3, [pc, #584]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a4 	beq.w	80016e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c6:	4b83      	ldr	r3, [pc, #524]	; (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015d2:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7f      	ldr	r2, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fb77 	bl	8000cd0 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fb73 	bl	8000cd0 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e12a      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x31a>
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
 8001618:	e02d      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x33c>
 8001622:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	4a6a      	ldr	r2, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
 800162e:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a67      	ldr	r2, [pc, #412]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x35e>
 8001644:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a5e      	ldr	r2, [pc, #376]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fb27 	bl	8000cd0 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb23 	bl	8000cd0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0d8      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ee      	beq.n	8001686 <HAL_RCC_OscConfig+0x386>
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb11 	bl	8000cd0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb0d 	bl	8000cd0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0c2      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80ae 	beq.w	800184c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d06d      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d14b      	bne.n	800179c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a31      	ldr	r2, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800170a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fade 	bl	8000cd0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fada 	bl	8000cd0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e091      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	071b      	lsls	r3, r3, #28
 8001762:	491b      	ldr	r1, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff faac 	bl	8000cd0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff faa8 	bl	8000cd0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e05f      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x47c>
 800179a:	e057      	b.n	800184c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fa92 	bl	8000cd0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fa8e 	bl	8000cd0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e045      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4b0>
 80017ce:	e03d      	b.n	800184c <HAL_RCC_OscConfig+0x54c>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_RCC_OscConfig+0x558>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d030      	beq.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d129      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d122      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d119      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d10f      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d0      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4965      	ldr	r1, [pc, #404]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d040      	beq.n	8001980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e073      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06b      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4936      	ldr	r1, [pc, #216]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f9be 	bl	8000cd0 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff f9ba 	bl	8000cd0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e053      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d210      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x1cc>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1d0>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1d4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f91a 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08002784 	.word	0x08002784
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a38:	b090      	sub	sp, #64	; 0x40
 8001a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a40:	2300      	movs	r3, #0
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d00d      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x40>
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	f200 80a1 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x34>
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a66:	e09b      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a6c:	e09b      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a72:	e098      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d028      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	2200      	movs	r2, #0
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	627a      	str	r2, [r7, #36]	; 0x24
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001aa0:	fb03 f201 	mul.w	r2, r3, r1
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	fb00 f303 	mul.w	r3, r0, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a43      	ldr	r2, [pc, #268]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8001aae:	fba0 1202 	umull	r1, r2, r0, r2
 8001ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aba:	4413      	add	r3, r2
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	61fa      	str	r2, [r7, #28]
 8001ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ace:	f7fe fbb3 	bl	8000238 <__aeabi_uldivmod>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ada:	e053      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	617a      	str	r2, [r7, #20]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aee:	f04f 0b00 	mov.w	fp, #0
 8001af2:	4652      	mov	r2, sl
 8001af4:	465b      	mov	r3, fp
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	0159      	lsls	r1, r3, #5
 8001b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b04:	0150      	lsls	r0, r2, #5
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b0e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b26:	ebb2 0408 	subs.w	r4, r2, r8
 8001b2a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	00eb      	lsls	r3, r5, #3
 8001b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3c:	00e2      	lsls	r2, r4, #3
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	eb14 030a 	adds.w	r3, r4, sl
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	eb45 030b 	adc.w	r3, r5, fp
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	028b      	lsls	r3, r1, #10
 8001b5e:	4621      	mov	r1, r4
 8001b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b64:	4621      	mov	r1, r4
 8001b66:	028a      	lsls	r2, r1, #10
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b78:	f7fe fb5e 	bl	8000238 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3740      	adds	r7, #64	; 0x40
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	017d7840 	.word	0x017d7840

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf2:	6093      	str	r3, [r2, #8]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	4964      	ldr	r1, [pc, #400]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	4959      	ldr	r1, [pc, #356]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c38:	d101      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	494a      	ldr	r1, [pc, #296]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c74:	d101      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 808b 	beq.w	8001dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f802 	bl	8000cd0 <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7fe fffe 	bl	8000cd0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e38f      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d035      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d02e      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d114      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffc6 	bl	8000cd0 <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7fe ffc2 	bl	8000cd0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e351      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ee      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d76:	d111      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d86:	400b      	ands	r3, r1
 8001d88:	4901      	ldr	r1, [pc, #4]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000
 8001d98:	0ffffcff 	.word	0x0ffffcff
 8001d9c:	4bac      	ldr	r3, [pc, #688]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4aab      	ldr	r2, [pc, #684]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001da6:	6093      	str	r3, [r2, #8]
 8001da8:	4ba9      	ldr	r3, [pc, #676]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	49a6      	ldr	r1, [pc, #664]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dc6:	4ba2      	ldr	r3, [pc, #648]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	4aa0      	ldr	r2, [pc, #640]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dd6:	4b9e      	ldr	r3, [pc, #632]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	499b      	ldr	r1, [pc, #620]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df4:	4b96      	ldr	r3, [pc, #600]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e02:	4993      	ldr	r1, [pc, #588]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e16:	4b8e      	ldr	r3, [pc, #568]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e24:	498a      	ldr	r1, [pc, #552]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e38:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e46:	4982      	ldr	r1, [pc, #520]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e5a:	4b7d      	ldr	r3, [pc, #500]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4979      	ldr	r1, [pc, #484]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7c:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4971      	ldr	r1, [pc, #452]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f023 020c 	bic.w	r2, r3, #12
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	4968      	ldr	r1, [pc, #416]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ec0:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4960      	ldr	r1, [pc, #384]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef0:	4957      	ldr	r1, [pc, #348]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f04:	4b52      	ldr	r3, [pc, #328]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	494f      	ldr	r1, [pc, #316]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	4946      	ldr	r1, [pc, #280]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	493e      	ldr	r1, [pc, #248]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f9a:	492d      	ldr	r1, [pc, #180]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d011      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fbc:	4924      	ldr	r1, [pc, #144]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffc:	4914      	ldr	r1, [pc, #80]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00f      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002044:	4902      	ldr	r1, [pc, #8]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800204c:	e002      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002066:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	4986      	ldr	r1, [pc, #536]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002094:	497d      	ldr	r1, [pc, #500]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d006      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80d6 	beq.w	800225c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020b0:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7fe fe08 	bl	8000cd0 <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020c4:	f7fe fe04 	bl	8000cd0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e195      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d021      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11d      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002104:	4b61      	ldr	r3, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210a:	0e1b      	lsrs	r3, r3, #24
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	019a      	lsls	r2, r3, #6
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	071b      	lsls	r3, r3, #28
 800212a:	4958      	ldr	r1, [pc, #352]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02e      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d129      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800215e:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800216c:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002172:	0f1b      	lsrs	r3, r3, #28
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	019a      	lsls	r2, r3, #6
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	061b      	lsls	r3, r3, #24
 800218c:	431a      	orrs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	071b      	lsls	r3, r3, #28
 8002192:	493e      	ldr	r1, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a0:	f023 021f 	bic.w	r2, r3, #31
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	3b01      	subs	r3, #1
 80021aa:	4938      	ldr	r1, [pc, #224]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01d      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021be:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d2:	0f1b      	lsrs	r3, r3, #28
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	019a      	lsls	r2, r3, #6
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	4926      	ldr	r1, [pc, #152]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	019a      	lsls	r2, r3, #6
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	071b      	lsls	r3, r3, #28
 8002222:	491a      	ldr	r1, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002236:	f7fe fd4b 	bl	8000cd0 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800223e:	f7fe fd47 	bl	8000cd0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0d8      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 80ce 	bne.w	8002400 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7fe fd2e 	bl	8000cd0 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002276:	e00b      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002278:	f7fe fd2a 	bl	8000cd0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d904      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0bb      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002290:	4b5e      	ldr	r3, [pc, #376]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229c:	d0ec      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02e      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12a      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022c6:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	0f1b      	lsrs	r3, r3, #28
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	019a      	lsls	r2, r3, #6
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	4944      	ldr	r1, [pc, #272]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002308:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	493d      	ldr	r1, [pc, #244]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d022      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002330:	d11d      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	0e1b      	lsrs	r3, r3, #24
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	0f1b      	lsrs	r3, r3, #28
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	019a      	lsls	r2, r3, #6
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	061b      	lsls	r3, r3, #24
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	071b      	lsls	r3, r3, #28
 8002366:	4929      	ldr	r1, [pc, #164]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	0e1b      	lsrs	r3, r3, #24
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	019a      	lsls	r2, r3, #6
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	4917      	ldr	r1, [pc, #92]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	4911      	ldr	r1, [pc, #68]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d8:	f7fe fc7a 	bl	8000cd0 <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023e0:	f7fe fc76 	bl	8000cd0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e007      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023fe:	d1ef      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
 *  Created on: 12 Jan. 2023
 *      Author: ryan
 */
#include "QAD_GPIO.hpp"

QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef *gpio, uint16_t pin) :
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
    gpio(gpio), pin(pin), state(PinOff) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	809a      	strh	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	719a      	strb	r2, [r3, #6]

    GPIO_InitTypeDef GPIO_Init;
    GPIO_Init.Pin = pin;
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8002434:	2301      	movs	r3, #1
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(gpio, &GPIO_Init);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f7fe fd34 	bl	8000eb4 <HAL_GPIO_Init>
  }
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZN15QAD_GPIO_Output2onEv>:
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;

    HAL_GPIO_Init(gpio, &GPIO_Init);
  }

  void QAD_GPIO_Output::on(void) {
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  	HAL_GPIO_WritePin(gpio, pin, GPIO_PIN_SET);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fecf 	bl	800120c <HAL_GPIO_WritePin>
  	state = PinOn;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	719a      	strb	r2, [r3, #6]
  }
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZN15QAD_GPIO_Output3offEv>:

  void QAD_GPIO_Output::off(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  	HAL_GPIO_WritePin(gpio, pin, GPIO_PIN_RESET);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	889b      	ldrh	r3, [r3, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe febc 	bl	800120c <HAL_GPIO_WritePin>
  	state = PinOff;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	719a      	strb	r2, [r3, #6]
  }
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZN15QAD_GPIO_Output6toggleEv>:

  void QAD_GPIO_Output::toggle(void) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  	if (state == PinOn) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	799b      	ldrb	r3, [r3, #6]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d103      	bne.n	80024ba <_ZN15QAD_GPIO_Output6toggleEv+0x18>
  		off();
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffe2 	bl	800247c <_ZN15QAD_GPIO_Output3offEv>
  	} else {
  		on();
  	}
  }
 80024b8:	e002      	b.n	80024c0 <_ZN15QAD_GPIO_Output6toggleEv+0x1e>
  		on();
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffcb 	bl	8002456 <_ZN15QAD_GPIO_Output2onEv>
  }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_Znwj>:
 80024c8:	2801      	cmp	r0, #1
 80024ca:	bf38      	it	cc
 80024cc:	2001      	movcc	r0, #1
 80024ce:	b510      	push	{r4, lr}
 80024d0:	4604      	mov	r4, r0
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 f844 	bl	8002560 <malloc>
 80024d8:	b930      	cbnz	r0, 80024e8 <_Znwj+0x20>
 80024da:	f000 f807 	bl	80024ec <_ZSt15get_new_handlerv>
 80024de:	b908      	cbnz	r0, 80024e4 <_Znwj+0x1c>
 80024e0:	f000 f80c 	bl	80024fc <abort>
 80024e4:	4780      	blx	r0
 80024e6:	e7f4      	b.n	80024d2 <_Znwj+0xa>
 80024e8:	bd10      	pop	{r4, pc}
	...

080024ec <_ZSt15get_new_handlerv>:
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <_ZSt15get_new_handlerv+0xc>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f3bf 8f5b 	dmb	ish
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000094 	.word	0x20000094

080024fc <abort>:
 80024fc:	b508      	push	{r3, lr}
 80024fe:	2006      	movs	r0, #6
 8002500:	f000 f90a 	bl	8002718 <raise>
 8002504:	2001      	movs	r0, #1
 8002506:	f7fe fb4d 	bl	8000ba4 <_exit>
	...

0800250c <__errno>:
 800250c:	4b01      	ldr	r3, [pc, #4]	; (8002514 <__errno+0x8>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000000c 	.word	0x2000000c

08002518 <__libc_init_array>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	4d0d      	ldr	r5, [pc, #52]	; (8002550 <__libc_init_array+0x38>)
 800251c:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <__libc_init_array+0x3c>)
 800251e:	1b64      	subs	r4, r4, r5
 8002520:	10a4      	asrs	r4, r4, #2
 8002522:	2600      	movs	r6, #0
 8002524:	42a6      	cmp	r6, r4
 8002526:	d109      	bne.n	800253c <__libc_init_array+0x24>
 8002528:	4d0b      	ldr	r5, [pc, #44]	; (8002558 <__libc_init_array+0x40>)
 800252a:	4c0c      	ldr	r4, [pc, #48]	; (800255c <__libc_init_array+0x44>)
 800252c:	f000 f91e 	bl	800276c <_init>
 8002530:	1b64      	subs	r4, r4, r5
 8002532:	10a4      	asrs	r4, r4, #2
 8002534:	2600      	movs	r6, #0
 8002536:	42a6      	cmp	r6, r4
 8002538:	d105      	bne.n	8002546 <__libc_init_array+0x2e>
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002540:	4798      	blx	r3
 8002542:	3601      	adds	r6, #1
 8002544:	e7ee      	b.n	8002524 <__libc_init_array+0xc>
 8002546:	f855 3b04 	ldr.w	r3, [r5], #4
 800254a:	4798      	blx	r3
 800254c:	3601      	adds	r6, #1
 800254e:	e7f2      	b.n	8002536 <__libc_init_array+0x1e>
 8002550:	0800279c 	.word	0x0800279c
 8002554:	0800279c 	.word	0x0800279c
 8002558:	0800279c 	.word	0x0800279c
 800255c:	080027a0 	.word	0x080027a0

08002560 <malloc>:
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <malloc+0xc>)
 8002562:	4601      	mov	r1, r0
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f000 b82b 	b.w	80025c0 <_malloc_r>
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c

08002570 <memset>:
 8002570:	4402      	add	r2, r0
 8002572:	4603      	mov	r3, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	f803 1b01 	strb.w	r1, [r3], #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <sbrk_aligned>:
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	4e0e      	ldr	r6, [pc, #56]	; (80025bc <sbrk_aligned+0x3c>)
 8002584:	460c      	mov	r4, r1
 8002586:	6831      	ldr	r1, [r6, #0]
 8002588:	4605      	mov	r5, r0
 800258a:	b911      	cbnz	r1, 8002592 <sbrk_aligned+0x12>
 800258c:	f000 f88c 	bl	80026a8 <_sbrk_r>
 8002590:	6030      	str	r0, [r6, #0]
 8002592:	4621      	mov	r1, r4
 8002594:	4628      	mov	r0, r5
 8002596:	f000 f887 	bl	80026a8 <_sbrk_r>
 800259a:	1c43      	adds	r3, r0, #1
 800259c:	d00a      	beq.n	80025b4 <sbrk_aligned+0x34>
 800259e:	1cc4      	adds	r4, r0, #3
 80025a0:	f024 0403 	bic.w	r4, r4, #3
 80025a4:	42a0      	cmp	r0, r4
 80025a6:	d007      	beq.n	80025b8 <sbrk_aligned+0x38>
 80025a8:	1a21      	subs	r1, r4, r0
 80025aa:	4628      	mov	r0, r5
 80025ac:	f000 f87c 	bl	80026a8 <_sbrk_r>
 80025b0:	3001      	adds	r0, #1
 80025b2:	d101      	bne.n	80025b8 <sbrk_aligned+0x38>
 80025b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80025b8:	4620      	mov	r0, r4
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	2000009c 	.word	0x2000009c

080025c0 <_malloc_r>:
 80025c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c4:	1ccd      	adds	r5, r1, #3
 80025c6:	f025 0503 	bic.w	r5, r5, #3
 80025ca:	3508      	adds	r5, #8
 80025cc:	2d0c      	cmp	r5, #12
 80025ce:	bf38      	it	cc
 80025d0:	250c      	movcc	r5, #12
 80025d2:	2d00      	cmp	r5, #0
 80025d4:	4607      	mov	r7, r0
 80025d6:	db01      	blt.n	80025dc <_malloc_r+0x1c>
 80025d8:	42a9      	cmp	r1, r5
 80025da:	d905      	bls.n	80025e8 <_malloc_r+0x28>
 80025dc:	230c      	movs	r3, #12
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	2600      	movs	r6, #0
 80025e2:	4630      	mov	r0, r6
 80025e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025e8:	4e2e      	ldr	r6, [pc, #184]	; (80026a4 <_malloc_r+0xe4>)
 80025ea:	f000 f8b1 	bl	8002750 <__malloc_lock>
 80025ee:	6833      	ldr	r3, [r6, #0]
 80025f0:	461c      	mov	r4, r3
 80025f2:	bb34      	cbnz	r4, 8002642 <_malloc_r+0x82>
 80025f4:	4629      	mov	r1, r5
 80025f6:	4638      	mov	r0, r7
 80025f8:	f7ff ffc2 	bl	8002580 <sbrk_aligned>
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	4604      	mov	r4, r0
 8002600:	d14d      	bne.n	800269e <_malloc_r+0xde>
 8002602:	6834      	ldr	r4, [r6, #0]
 8002604:	4626      	mov	r6, r4
 8002606:	2e00      	cmp	r6, #0
 8002608:	d140      	bne.n	800268c <_malloc_r+0xcc>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	4631      	mov	r1, r6
 800260e:	4638      	mov	r0, r7
 8002610:	eb04 0803 	add.w	r8, r4, r3
 8002614:	f000 f848 	bl	80026a8 <_sbrk_r>
 8002618:	4580      	cmp	r8, r0
 800261a:	d13a      	bne.n	8002692 <_malloc_r+0xd2>
 800261c:	6821      	ldr	r1, [r4, #0]
 800261e:	3503      	adds	r5, #3
 8002620:	1a6d      	subs	r5, r5, r1
 8002622:	f025 0503 	bic.w	r5, r5, #3
 8002626:	3508      	adds	r5, #8
 8002628:	2d0c      	cmp	r5, #12
 800262a:	bf38      	it	cc
 800262c:	250c      	movcc	r5, #12
 800262e:	4629      	mov	r1, r5
 8002630:	4638      	mov	r0, r7
 8002632:	f7ff ffa5 	bl	8002580 <sbrk_aligned>
 8002636:	3001      	adds	r0, #1
 8002638:	d02b      	beq.n	8002692 <_malloc_r+0xd2>
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	442b      	add	r3, r5
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	e00e      	b.n	8002660 <_malloc_r+0xa0>
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	1b52      	subs	r2, r2, r5
 8002646:	d41e      	bmi.n	8002686 <_malloc_r+0xc6>
 8002648:	2a0b      	cmp	r2, #11
 800264a:	d916      	bls.n	800267a <_malloc_r+0xba>
 800264c:	1961      	adds	r1, r4, r5
 800264e:	42a3      	cmp	r3, r4
 8002650:	6025      	str	r5, [r4, #0]
 8002652:	bf18      	it	ne
 8002654:	6059      	strne	r1, [r3, #4]
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	bf08      	it	eq
 800265a:	6031      	streq	r1, [r6, #0]
 800265c:	5162      	str	r2, [r4, r5]
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	4638      	mov	r0, r7
 8002662:	f104 060b 	add.w	r6, r4, #11
 8002666:	f000 f879 	bl	800275c <__malloc_unlock>
 800266a:	f026 0607 	bic.w	r6, r6, #7
 800266e:	1d23      	adds	r3, r4, #4
 8002670:	1af2      	subs	r2, r6, r3
 8002672:	d0b6      	beq.n	80025e2 <_malloc_r+0x22>
 8002674:	1b9b      	subs	r3, r3, r6
 8002676:	50a3      	str	r3, [r4, r2]
 8002678:	e7b3      	b.n	80025e2 <_malloc_r+0x22>
 800267a:	6862      	ldr	r2, [r4, #4]
 800267c:	42a3      	cmp	r3, r4
 800267e:	bf0c      	ite	eq
 8002680:	6032      	streq	r2, [r6, #0]
 8002682:	605a      	strne	r2, [r3, #4]
 8002684:	e7ec      	b.n	8002660 <_malloc_r+0xa0>
 8002686:	4623      	mov	r3, r4
 8002688:	6864      	ldr	r4, [r4, #4]
 800268a:	e7b2      	b.n	80025f2 <_malloc_r+0x32>
 800268c:	4634      	mov	r4, r6
 800268e:	6876      	ldr	r6, [r6, #4]
 8002690:	e7b9      	b.n	8002606 <_malloc_r+0x46>
 8002692:	230c      	movs	r3, #12
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4638      	mov	r0, r7
 8002698:	f000 f860 	bl	800275c <__malloc_unlock>
 800269c:	e7a1      	b.n	80025e2 <_malloc_r+0x22>
 800269e:	6025      	str	r5, [r4, #0]
 80026a0:	e7de      	b.n	8002660 <_malloc_r+0xa0>
 80026a2:	bf00      	nop
 80026a4:	20000098 	.word	0x20000098

080026a8 <_sbrk_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d06      	ldr	r5, [pc, #24]	; (80026c4 <_sbrk_r+0x1c>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	f7fe fa80 	bl	8000bb8 <_sbrk>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_sbrk_r+0x1a>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_sbrk_r+0x1a>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	200000a0 	.word	0x200000a0

080026c8 <_raise_r>:
 80026c8:	291f      	cmp	r1, #31
 80026ca:	b538      	push	{r3, r4, r5, lr}
 80026cc:	4604      	mov	r4, r0
 80026ce:	460d      	mov	r5, r1
 80026d0:	d904      	bls.n	80026dc <_raise_r+0x14>
 80026d2:	2316      	movs	r3, #22
 80026d4:	6003      	str	r3, [r0, #0]
 80026d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026da:	bd38      	pop	{r3, r4, r5, pc}
 80026dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80026de:	b112      	cbz	r2, 80026e6 <_raise_r+0x1e>
 80026e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80026e4:	b94b      	cbnz	r3, 80026fa <_raise_r+0x32>
 80026e6:	4620      	mov	r0, r4
 80026e8:	f000 f830 	bl	800274c <_getpid_r>
 80026ec:	462a      	mov	r2, r5
 80026ee:	4601      	mov	r1, r0
 80026f0:	4620      	mov	r0, r4
 80026f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026f6:	f000 b817 	b.w	8002728 <_kill_r>
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00a      	beq.n	8002714 <_raise_r+0x4c>
 80026fe:	1c59      	adds	r1, r3, #1
 8002700:	d103      	bne.n	800270a <_raise_r+0x42>
 8002702:	2316      	movs	r3, #22
 8002704:	6003      	str	r3, [r0, #0]
 8002706:	2001      	movs	r0, #1
 8002708:	e7e7      	b.n	80026da <_raise_r+0x12>
 800270a:	2400      	movs	r4, #0
 800270c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002710:	4628      	mov	r0, r5
 8002712:	4798      	blx	r3
 8002714:	2000      	movs	r0, #0
 8002716:	e7e0      	b.n	80026da <_raise_r+0x12>

08002718 <raise>:
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <raise+0xc>)
 800271a:	4601      	mov	r1, r0
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f7ff bfd3 	b.w	80026c8 <_raise_r>
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c

08002728 <_kill_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d07      	ldr	r5, [pc, #28]	; (8002748 <_kill_r+0x20>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	602b      	str	r3, [r5, #0]
 8002736:	f7fe fa25 	bl	8000b84 <_kill>
 800273a:	1c43      	adds	r3, r0, #1
 800273c:	d102      	bne.n	8002744 <_kill_r+0x1c>
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	b103      	cbz	r3, 8002744 <_kill_r+0x1c>
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	bd38      	pop	{r3, r4, r5, pc}
 8002746:	bf00      	nop
 8002748:	200000a0 	.word	0x200000a0

0800274c <_getpid_r>:
 800274c:	f7fe ba12 	b.w	8000b74 <_getpid>

08002750 <__malloc_lock>:
 8002750:	4801      	ldr	r0, [pc, #4]	; (8002758 <__malloc_lock+0x8>)
 8002752:	f000 b809 	b.w	8002768 <__retarget_lock_acquire_recursive>
 8002756:	bf00      	nop
 8002758:	200000a4 	.word	0x200000a4

0800275c <__malloc_unlock>:
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <__malloc_unlock+0x8>)
 800275e:	f000 b804 	b.w	800276a <__retarget_lock_release_recursive>
 8002762:	bf00      	nop
 8002764:	200000a4 	.word	0x200000a4

08002768 <__retarget_lock_acquire_recursive>:
 8002768:	4770      	bx	lr

0800276a <__retarget_lock_release_recursive>:
 800276a:	4770      	bx	lr

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
